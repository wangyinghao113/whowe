<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FinGet</title>
  
  <subtitle>前端 —— 我一直在路上</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-22T05:02:59.311Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>FinGet</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript从初级往高级走系列————Virtual Dom</title>
    <link href="http://yoursite.com/2018/05/22/virtualDom/"/>
    <id>http://yoursite.com/2018/05/22/virtualDom/</id>
    <published>2018-05-22T05:02:01.000Z</published>
    <updated>2018-05-22T05:02:59.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是虚拟DOM"><a href="#什么是虚拟DOM" class="headerlink" title="什么是虚拟DOM"></a>什么是虚拟DOM</h2><ul><li>用JS模拟DOM结构</li><li>DOM变化的对比，放在JS层来做（图灵完备语言）</li><li>提高重绘性能</li></ul><h3 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h3><p>页面渲染过程：<br><img src="https://i.imgur.com/WEJCK1f.jpg" alt="重绘和回流"></p><ul><li>当render tree中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(reflow)。</li><li>当render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如background-color。则就叫称为重绘。</li></ul><h3 id="模拟虚拟DOM"><a href="#模拟虚拟DOM" class="headerlink" title="模拟虚拟DOM"></a>模拟虚拟DOM</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js模拟虚拟DOM</span></span><br><span class="line">&#123;</span><br><span class="line">  tag: <span class="string">'ul'</span>,</span><br><span class="line">  attrs:&#123;</span><br><span class="line">    id: <span class="string">'list'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  children:[</span><br><span class="line">    &#123;</span><br><span class="line">      tag: <span class="string">'li'</span>,</span><br><span class="line">      attrs: &#123;<span class="attr">className</span>: <span class="string">'item'</span>&#125;,</span><br><span class="line">      children: [<span class="string">'Item 1'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      tag: <span class="string">'li'</span>,</span><br><span class="line">      attrs: &#123;<span class="attr">className</span>: <span class="string">'item'</span>&#125;,</span><br><span class="line">      children: [<span class="string">'Item 2'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/2.2.0/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-change"</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> data = [</span></span><br><span class="line"><span class="javascript">  &#123;<span class="attr">name</span>: <span class="string">'张三'</span>,<span class="attr">age</span>: <span class="string">'20'</span>,<span class="attr">address</span>: <span class="string">'北京'</span>&#125;,</span></span><br><span class="line"><span class="javascript">  &#123;<span class="attr">name</span>: <span class="string">'王五'</span>,<span class="attr">age</span>: <span class="string">'22'</span>,<span class="attr">address</span>: <span class="string">'成都'</span>&#125;,</span></span><br><span class="line"><span class="javascript">  &#123;<span class="attr">name</span>: <span class="string">'李四'</span>,<span class="attr">age</span>: <span class="string">'21'</span>,<span class="attr">address</span>: <span class="string">'上海'</span>&#125;</span></span><br><span class="line"><span class="undefined">]</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 渲染函数</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> $container = $(<span class="string">'#container'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 清空容器，重要！！！</span></span></span><br><span class="line"><span class="javascript">      $container.html(<span class="string">''</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 拼接 table</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> $table = $(<span class="string">'&lt;table&gt;'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml">      $table.append($('<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>name<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>age<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>address<span class="tag">&lt;/<span class="name">td</span>&gt;</span>/tr&gt;'));</span></span><br><span class="line"><span class="javascript">      data.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span></span><br><span class="line"><span class="xml">      $table.append($('<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>' + item.name + '<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>' + item.age + '<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>' + item.address   + '<span class="tag">&lt;/<span class="name">td</span>&gt;</span>/tr&gt;'))</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 渲染到页面</span></span></span><br><span class="line"><span class="undefined">      $container.append($table);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#btn-change'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">      data[1].age = 30;</span></span><br><span class="line"><span class="javascript">      data[<span class="number">2</span>].address = <span class="string">'深圳'</span>;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// re-render  再次渲染</span></span></span><br><span class="line"><span class="undefined">      render(data);</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 页面加载完立刻执行（初次渲染）</span></span></span><br><span class="line"><span class="undefined">    render(data);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>虽然只改变了两个数据，但是整个table都闪烁了（回流&amp;重绘）<br><img src="https://i.imgur.com/x7JUVud.gif" alt=""></p><ul><li>DOM操作是‘昂贵’的，js运行效率高</li><li>尽量减少DOM操作，尽量减少回流重绘</li></ul><h2 id="虚拟DOM如何应用，核心API是什么"><a href="#虚拟DOM如何应用，核心API是什么" class="headerlink" title="虚拟DOM如何应用，核心API是什么"></a>虚拟DOM如何应用，核心API是什么</h2><h3 id="介绍-snabbdom"><a href="#介绍-snabbdom" class="headerlink" title="介绍 snabbdom"></a>介绍 snabbdom</h3><p><a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noopener">snabbdom GitHub地址</a></p><p>官网例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> snabbdom = <span class="built_in">require</span>(<span class="string">'snabbdom'</span>);</span><br><span class="line"><span class="keyword">var</span> patch = snabbdom.init([ <span class="comment">// Init patch function with chosen modules</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'snabbdom/modules/class'</span>).default, <span class="comment">// makes it easy to toggle classes</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'snabbdom/modules/props'</span>).default, <span class="comment">// for setting properties on DOM elements</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'snabbdom/modules/style'</span>).default, <span class="comment">// handles styling on elements with support for animations</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'snabbdom/modules/eventlisteners'</span>).default, <span class="comment">// attaches event listeners</span></span><br><span class="line">]);</span><br><span class="line"><span class="keyword">var</span> h = <span class="built_in">require</span>(<span class="string">'snabbdom/h'</span>).default; <span class="comment">// helper function for creating vnodes</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// h函数生成一个虚拟节点</span></span><br><span class="line"><span class="keyword">var</span> vnode = h(<span class="string">'div#container.two.classes'</span>, &#123;<span class="attr">on</span>: &#123;<span class="attr">click</span>: someFn&#125;&#125;, [</span><br><span class="line">  h(<span class="string">'span'</span>, &#123;<span class="attr">style</span>: &#123;<span class="attr">fontWeight</span>: <span class="string">'bold'</span>&#125;&#125;, <span class="string">'This is bold'</span>),</span><br><span class="line">  <span class="string">' and this is just normal text'</span>,</span><br><span class="line">  h(<span class="string">'a'</span>, &#123;<span class="attr">props</span>: &#123;<span class="attr">href</span>: <span class="string">'/foo'</span>&#125;&#125;, <span class="string">'I\'ll take you places!'</span>)</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// Patch into empty DOM element – this modifies the DOM as a side effect</span></span><br><span class="line">patch(container, vnode); <span class="comment">// 把vnode加入到container中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据改变，重新生成一个newVnode</span></span><br><span class="line"><span class="keyword">var</span> newVnode = h(<span class="string">'div#container.two.classes'</span>, &#123;<span class="attr">on</span>: &#123;<span class="attr">click</span>: anotherEventHandler&#125;&#125;, [</span><br><span class="line">  h(<span class="string">'span'</span>, &#123;<span class="attr">style</span>: &#123;<span class="attr">fontWeight</span>: <span class="string">'normal'</span>, <span class="attr">fontStyle</span>: <span class="string">'italic'</span>&#125;&#125;, <span class="string">'This is now italic type'</span>),</span><br><span class="line">  <span class="string">' and this is still just normal text'</span>,</span><br><span class="line">  h(<span class="string">'a'</span>, &#123;<span class="attr">props</span>: &#123;<span class="attr">href</span>: <span class="string">'/bar'</span>&#125;&#125;, <span class="string">'I\'ll take you places!'</span>)</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// Second `patch` invocation</span></span><br><span class="line"><span class="comment">// 将newVnode更新到之前的vnode中，从而更新视图</span></span><br><span class="line">patch(vnode, newVnode); <span class="comment">// Snabbdom efficiently updates the old view to the new state</span></span><br></pre></td></tr></table></figure></p><h4 id="snabbdom-h-函数"><a href="#snabbdom-h-函数" class="headerlink" title="snabbdom h 函数"></a>snabbdom h 函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vnode = h(<span class="string">'ul#list'</span>,&#123;&#125;,[</span><br><span class="line">  h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 1'</span>),</span><br><span class="line">  h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 2'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  tag: <span class="string">'ul'</span>,</span><br><span class="line">  attrs:&#123;</span><br><span class="line">    id: <span class="string">'list'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  children:[</span><br><span class="line">    &#123;</span><br><span class="line">      tag: <span class="string">'li'</span>,</span><br><span class="line">      attrs: &#123;<span class="attr">className</span>: <span class="string">'item'</span>&#125;,</span><br><span class="line">      children: [<span class="string">'Item 1'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      tag: <span class="string">'li'</span>,</span><br><span class="line">      attrs: &#123;<span class="attr">className</span>: <span class="string">'item'</span>&#125;,</span><br><span class="line">      children: [<span class="string">'Item 2'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="snabbdom-patch-函数"><a href="#snabbdom-patch-函数" class="headerlink" title="snabbdom patch 函数"></a>snabbdom patch 函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vnode = h(<span class="string">'ul#list'</span>,&#123;&#125;,[</span><br><span class="line">  h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 1'</span>),</span><br><span class="line">  h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 2'</span>)</span><br><span class="line">])</span><br><span class="line"><span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</span><br><span class="line">patch(container, vnode);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟改变</span></span><br><span class="line"><span class="keyword">var</span> btnChange = <span class="built_in">document</span>.getElementById(<span class="string">'btn-change'</span>);</span><br><span class="line">btnChange.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newVnode = h(<span class="string">'ul#list'</span>,&#123;&#125;,[</span><br><span class="line">    h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 111'</span>),</span><br><span class="line">    h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 222'</span>),</span><br><span class="line">    h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 333'</span>)</span><br><span class="line">  ])</span><br><span class="line">  patch(vnode, newVnode);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="snabbdom例子"><a href="#snabbdom例子" class="headerlink" title="snabbdom例子"></a>snabbdom例子</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/snabbdom-class.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/snabbdom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/snabbdom-props.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/snabbdom-style.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/h.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/snabbdom-eventlisteners.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-change"</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> snabbdom = <span class="built_in">window</span>.snabbdom;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 定义 patch</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> patch = snabbdom.init([</span></span><br><span class="line"><span class="undefined">snabbdom_class,</span></span><br><span class="line"><span class="undefined">snabbdom_props,</span></span><br><span class="line"><span class="undefined">snabbdom_style,</span></span><br><span class="line"><span class="undefined">snabbdom_eventlisteners</span></span><br><span class="line"><span class="undefined">])</span></span><br><span class="line"><span class="javascript"><span class="comment">// 定义 h</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> h = snabbdom.h;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 生成 vnode</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vnode = h(<span class="string">'ul#list'</span>,&#123;&#125;,[</span></span><br><span class="line"><span class="javascript">  h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 1'</span>),</span></span><br><span class="line"><span class="javascript">    h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 2'</span>)</span></span><br><span class="line"><span class="undefined">])</span></span><br><span class="line"><span class="undefined">patch(container, vnode);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 模拟数据改变</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btnChange = <span class="built_in">document</span>.getElementById(<span class="string">'btn-change'</span>);</span></span><br><span class="line"><span class="javascript">btnChange.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> newVnode = h(<span class="string">'ul#list'</span>,&#123;&#125;,[</span></span><br><span class="line"><span class="javascript">    h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 1'</span>),</span></span><br><span class="line"><span class="javascript">    h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 222'</span>),</span></span><br><span class="line"><span class="javascript">    h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 333'</span>)</span></span><br><span class="line"><span class="undefined">  ])</span></span><br><span class="line"><span class="undefined">  patch(vnode, newVnode);</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看图，只有修改了的数据才进行了刷新，减少了DOM操作，这其实就是vnode与newVnode对比，找出改变了的地方，然后只重新渲染改变的<br><img src="https://i.imgur.com/bkGqypK.gif" alt=""></p><h3 id="重做之前的demo"><a href="#重做之前的demo" class="headerlink" title="重做之前的demo"></a>重做之前的demo</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-change"</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.0/snabbdom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.0/snabbdom-class.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.0/snabbdom-props.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.0/snabbdom-style.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.0/snabbdom-eventlisteners.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.0/h.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> snabbdom = <span class="built_in">window</span>.snabbdom;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义关键函数 patch</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> patch = snabbdom.init([</span></span><br><span class="line"><span class="undefined">      snabbdom_class,</span></span><br><span class="line"><span class="undefined">      snabbdom_props,</span></span><br><span class="line"><span class="undefined">      snabbdom_style,</span></span><br><span class="line"><span class="undefined">      snabbdom_eventlisteners</span></span><br><span class="line"><span class="undefined">    ]);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义关键函数 h</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> h = snabbdom.h;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 原始数据</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> data = [</span></span><br><span class="line"><span class="javascript">      &#123;<span class="attr">name</span>: <span class="string">'张三'</span>,<span class="attr">age</span>: <span class="string">'20'</span>,<span class="attr">address</span>: <span class="string">'北京'</span>&#125;,</span></span><br><span class="line"><span class="javascript">  &#123;<span class="attr">name</span>: <span class="string">'王五'</span>,<span class="attr">age</span>: <span class="string">'22'</span>,<span class="attr">address</span>: <span class="string">'成都'</span>&#125;,</span></span><br><span class="line"><span class="javascript">  &#123;<span class="attr">name</span>: <span class="string">'李四'</span>,<span class="attr">age</span>: <span class="string">'21'</span>,<span class="attr">address</span>: <span class="string">'上海'</span>&#125;</span></span><br><span class="line"><span class="undefined">]</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 把表头也放在 data 中</span></span></span><br><span class="line"><span class="undefined">    data.unshift(&#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">'姓名'</span>,</span></span><br><span class="line"><span class="javascript">      age: <span class="string">'年龄'</span>,</span></span><br><span class="line"><span class="javascript">      address: <span class="string">'地址'</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 渲染函数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vnode;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> newVnode = h(<span class="string">'table'</span>, &#123;&#125;, data.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tds = [];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> i;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (i <span class="keyword">in</span> item) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (item.hasOwnProperty(i)) &#123;</span></span><br><span class="line"><span class="javascript">            tds.push(h(<span class="string">'td'</span>, &#123;&#125;, item[i] + <span class="string">''</span>));</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> h(<span class="string">'tr'</span>, &#123;&#125;, tds)</span></span><br><span class="line"><span class="undefined">      &#125;));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (vnode) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// re-render</span></span></span><br><span class="line"><span class="undefined">        patch(vnode, newVnode);</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 初次渲染</span></span></span><br><span class="line"><span class="undefined">        patch(container, newVnode);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 存储当前的 vnode 结果</span></span></span><br><span class="line"><span class="undefined">      vnode = newVnode;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 初次渲染</span></span></span><br><span class="line"><span class="undefined">    render(data)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btnChange = <span class="built_in">document</span>.getElementById(<span class="string">'btn-change'</span>)</span></span><br><span class="line"><span class="javascript">    btnChange.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">      data[1].age = 30</span></span><br><span class="line"><span class="javascript">      data[<span class="number">2</span>].address = <span class="string">'深圳'</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// re-render</span></span></span><br><span class="line"><span class="undefined">      render(data)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/aptwoC0.gif" alt=""></p><h3 id="核心API"><a href="#核心API" class="headerlink" title="核心API"></a>核心API</h3><ul><li>h(‘&lt;标签名&gt;’,{…属性…},[…子元素…])</li><li>h(‘&lt;标签名&gt;’,{…属性…},’…’)</li><li>patch(container,vnode)</li><li>patch(vnode,newVnode)</li></ul><h2 id="简单介绍-diff-算法"><a href="#简单介绍-diff-算法" class="headerlink" title="简单介绍 diff 算法"></a>简单介绍 diff 算法</h2><h3 id="什么是-diff-算法"><a href="#什么是-diff-算法" class="headerlink" title="什么是 diff 算法"></a>什么是 diff 算法</h3><p>这里有两个文本文件：<br><img src="https://i.imgur.com/RSJ5XMS.png" alt=""><br>借用<code>git bash</code>中 <code>diff</code> 命令可以比较两个文件的区别：<br><img src="https://i.imgur.com/cHgP1Rv.png" alt=""></p><p><a href="https://www.diffchecker.com/" target="_blank" rel="noopener">在线diff工具</a></p><p><img src="https://i.imgur.com/S1yiL9h.png" alt=""></p><p>虚拟DOM —&gt; DOM<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个实现流程，实际情况还很复杂</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">vnode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tag = vnode.tag  <span class="comment">// 'ul'</span></span><br><span class="line">  <span class="keyword">var</span> attrs = vnode.attrs || &#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> children = vnode.children || []</span><br><span class="line">  <span class="keyword">if</span> (!tag) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建真实的 DOM 元素</span></span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(tag)</span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="keyword">var</span> attrName</span><br><span class="line">  <span class="keyword">for</span> (attrName <span class="keyword">in</span> attrs) &#123;</span><br><span class="line">    <span class="keyword">if</span> (attrs.hasOwnProperty(attrName)) &#123;</span><br><span class="line">      <span class="comment">// 给 elem 添加属性</span></span><br><span class="line">      elem.setAttribute(attrName, attrs[attrName])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 子元素</span></span><br><span class="line">  children.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">childVnode</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 给 elem 添加子元素</span></span><br><span class="line">    elem.appendChild(createElement(childVnode))  <span class="comment">// 递归</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回真实的 DOM 元素</span></span><br><span class="line">  <span class="keyword">return</span> elem</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>vnode —&gt; newVnode<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateChildren</span>(<span class="params">vnode, newVnode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> children = vnode.children || [];</span><br><span class="line">  <span class="keyword">var</span> newChildren = newVnode.children || [];</span><br><span class="line"></span><br><span class="line">  children.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">childVnode, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newChildVnode = newChildren[index];</span><br><span class="line">    <span class="keyword">if</span> (childVnode.tag === newChildVnode.tag) &#123;</span><br><span class="line">        <span class="comment">// 深层次对比，递归</span></span><br><span class="line">        updateChildren(childVnode, newChildVnode);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 替换</span></span><br><span class="line">        replaceNode(childVnode, newChildVnode);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceNode</span>(<span class="params">vnode, newVnode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> elem = vnode.elem;  <span class="comment">// 真实的 DOM 节点</span></span><br><span class="line">  <span class="keyword">var</span> newElem = createElement(newVnode);</span><br><span class="line">  <span class="comment">// 替换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      JavaScript从初级往高级走系列，一次学习记录吧，一直在路上
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript从初级往高级走系列————异步</title>
    <link href="http://yoursite.com/2018/05/21/async/"/>
    <id>http://yoursite.com/2018/05/21/async/</id>
    <published>2018-05-21T06:38:23.000Z</published>
    <updated>2018-05-21T06:42:19.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><ul><li>什么是单线程，和异步有什么关系</li><li>什么是event-loop</li><li>是否用过jQuery的Deferred</li><li>Promise的基本使用和原理</li><li>介绍一下async/await(和Promise的区别、联系)</li><li>异步解决方案</li></ul><h2 id="什么是单线程，和异步有什么关系"><a href="#什么是单线程，和异步有什么关系" class="headerlink" title="什么是单线程，和异步有什么关系"></a>什么是单线程，和异步有什么关系</h2><blockquote><p>单线程-只有一个线程，只做一件事。JS之所以是单线程，取决于它的实际使用，例如JS不可能同添加一个DOM和删除这个DOM，所以它只能是单线程的。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">alert(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>上面这个例子中，当执行了<code>alert(1)</code>,如果用户不点击确定按钮，<code>console.log(2)</code>是不会执行的。</p><blockquote><p>为了利用多核CPU的计算能力，HTML5提出<code>WebWorker</code>标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p></blockquote><h2 id="js异步"><a href="#js异步" class="headerlink" title="js异步"></a>js异步</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">200</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">300</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">400</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">400</span>);</span><br><span class="line">.... <span class="comment">// 这里来很多很多个console.log(400); 结果就是打印完所有的400，等一秒再打印200</span></span><br></pre></td></tr></table></figure><h2 id="event-loop"><a href="#event-loop" class="headerlink" title="event-loop"></a>event-loop</h2><p><img src="http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100802.png" alt="event-loop"></p><h3 id="文字解释"><a href="#文字解释" class="headerlink" title="文字解释"></a>文字解释</h3><ul><li>事件轮询，JS实现异步的具体解决方案</li><li>同步代码，直接执行</li><li>异步函数先放在异步队列中</li><li>待同步函数执行完毕，轮询执行 异步队列 的函数</li></ul><p>上面那个例子的执行效果就是这样的：<br><img src="https://i.imgur.com/eAYeNea.png" alt=""><br>实例分析：<br><img src="https://i.imgur.com/tW0BkDD.png" alt=""><br><img src="https://i.imgur.com/EJ4jsZc.png" alt=""></p><blockquote><p>这个例子中有两种情况，取决于ajax的返回时间，如果ajax时间小于100ms它就先放进异步队列</p></blockquote><h2 id="Jquery-Deferred"><a href="#Jquery-Deferred" class="headerlink" title="Jquery Deferred"></a>Jquery Deferred</h2><h3 id="Jquery1-5前后的变化"><a href="#Jquery1-5前后的变化" class="headerlink" title="Jquery1.5前后的变化"></a>Jquery1.5前后的变化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ajax = $.ajax(&#123;</span><br><span class="line">  url: <span class="string">'data.json'</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success1'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success2'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success3'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'error'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ajax); <span class="comment">// 返回一个xhr对象</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链式操作</span></span><br><span class="line"><span class="keyword">var</span> ajax = $.ajax(<span class="string">'data.json'</span>);</span><br><span class="line">ajax.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'success1'</span>);</span><br><span class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'error'</span>);</span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ajax); <span class="comment">// 返回一个deferred对象</span></span><br></pre></td></tr></table></figure><ul><li>无法改变JS异步和单线程的本质</li><li>只能从写法上杜绝callback这种形式</li><li>它是一种语法糖形式，但是解耦了代码</li><li>很好的体现：开放封闭原则（对扩展开放，对修改封闭）</li></ul><h3 id="使用Jquery-Deferred"><a href="#使用Jquery-Deferred" class="headerlink" title="使用Jquery Deferred"></a>使用Jquery Deferred</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给出一段非常简单的异步操作代码，使用setTimeout函数</span></span><br><span class="line"><span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> task = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'执行完成)</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  setTimeout(task, 2000);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">wait();</span></span><br></pre></td></tr></table></figure><p>新增需求：要在执行完成之后进行某些特别复杂的操作，代码可能会很多，而且分好几个步骤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waitHandle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dtd = $.Deferred(); <span class="comment">// 创建一个deferred对象</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params">dtd</span>)</span>&#123; <span class="comment">// 要求传入一个deferred对象</span></span><br><span class="line">    <span class="keyword">var</span> task = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'执行完成'</span>);</span><br><span class="line">      dtd.resolve(); <span class="comment">// 表示异步任务已经完成</span></span><br><span class="line">      <span class="comment">// dtd.reject(); // 表示异步任务失败或出错</span></span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(task, <span class="number">2000</span>);</span><br><span class="line">    <span class="keyword">return</span> dtd; <span class="comment">// 要求返回deferred对象</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 注意，这里一定要有返回值</span></span><br><span class="line">  <span class="keyword">return</span> wait(dtd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w = waitHandle();</span><br><span class="line">w.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ok 1'</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'err 1'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ok 2'</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'err 2'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当执行dtd.reject()时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> w = waitHandle();</span><br><span class="line">w.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ok 1'</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'err 1'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 不能链式</span></span><br><span class="line">w.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ok 2'</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'err 2'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面封装的<code>waitHandle</code>方法,由于直接返回了<code>dtd</code>（deferred对象），所以用户可以直接调用<code>w.reject()</code>方法，导致无论是成功还是失败，最后都走失败。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waitHandle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dtd = $.Deferred();</span><br><span class="line">  <span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params">dtd</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> task = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'执行完成'</span>);</span><br><span class="line">      dtd.resolve(); </span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(task, <span class="number">2000</span>);</span><br><span class="line">    <span class="keyword">return</span> dtd.promise(); <span class="comment">// 注意这里返回的是promise，而不是直接返回deferred对象</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> wait(dtd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ES6的Promise：<a href="https://finget.github.io/2018/03/08/promise/" target="_blank" rel="noopener">点这里</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// promise封装一个异步加载图片的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      resolve(img)</span><br><span class="line">    &#125;</span><br><span class="line">    img.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      reject(<span class="string">'图片加载失败'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    img.src = src;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><blockquote><p>这是ES7提案中的，现在babel已经开始支持了，koa也是用async/await实现的。</p></blockquote><ul><li>then 只是将callback拆分了</li><li>async/await 是最直接的同步写法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="keyword">const</span> load = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result1 = <span class="keyword">await</span> loadImg(src1);</span><br><span class="line">  <span class="built_in">console</span>.log(result1);</span><br><span class="line">  <span class="keyword">const</span> result2 = <span class="keyword">await</span> loadImg(src2);</span><br><span class="line">  <span class="built_in">console</span>.log(result2);</span><br><span class="line">&#125;</span><br><span class="line">load();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      JavaScript从初级往高级走系列，一次学习记录吧，一直在路上
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript从初级往高级走系列————prototype</title>
    <link href="http://yoursite.com/2018/05/10/javascript-prototype/"/>
    <id>http://yoursite.com/2018/05/10/javascript-prototype/</id>
    <published>2018-05-10T03:56:15.000Z</published>
    <updated>2018-05-10T04:00:14.473Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><blockquote><p>下面内容为转载的，<a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noopener">原地址</a>,写的真的很好！</p></blockquote><h3 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h3><p>我们先使用构造函数创建一个对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">person.name = <span class="string">'Kevin'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure><p>在这个例子中，Person 就是一个构造函数，我们使用 new 创建了一个实例对象 person。</p><p>很简单吧，接下来进入正题：</p><h4 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h4><p>每个函数都有一个 prototype 属性，就是我们经常在各种例子中看到的那个 prototype ，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 虽然写在注释里，但是你要注意：</span></span><br><span class="line"><span class="comment">// prototype是函数才会有的属性</span></span><br><span class="line">Person.prototype.name = <span class="string">'Kevin'</span>;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person1.name) <span class="comment">// Kevin</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.name) <span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure><p>那这个函数的 <code>prototype</code> 属性到底指向的是什么呢？是这个函数的原型吗？</p><p>其实，函数的 <code>prototype</code> 属性指向了一个对象，这个对象正是调用该构造函数而创建的实例的原型，也就是这个例子中的 person1 和 person2 的原型。</p><p>那什么是原型呢？你可以这样理解：每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型”继承”属性。</p><p>让我们用一张图表示构造函数和实例原型之间的关系：</p><p><img src="https://s26.postimg.cc/x6u11fq6h/prototype1.png" alt="构造函数和实例原型的关系图"><br>在这张图中我们用 Object.prototype 表示实例原型。</p><p>那么我们该怎么表示实例与实例原型，也就是 <code>person</code> 和 <code>Person.prototype</code> 之间的关系呢，这时候我们就要讲到第二个属性：</p><h4 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong>proto</strong></h4><p>这是每一个JavaScript对象(除了 null )都具有的一个属性，叫<code>__proto__</code>，这个属性会指向该对象的原型。</p><p>为了证明这一点,我们可以在火狐或者谷歌中输入：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person.__proto__ === Person.prototype); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>于是我们更新下关系图：</p><p><img src="https://s26.postimg.cc/6lri5wy3t/prototype2.png" alt="实例与实例原型的关系图"></p><p>既然实例对象和构造函数都可以指向原型，那么原型是否有属性指向构造函数或者实例呢？</p><h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h4><p>指向实例倒是没有，因为一个构造函数可以生成多个实例，但是原型指向构造函数倒是有的，这就要讲到第三个属性：<code>constructor</code>，每个原型都有一个 <code>constructor</code> 属性指向关联的构造函数。</p><p>为了验证这一点，我们可以尝试：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person === Person.prototype.constructor); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>所以再更新下关系图：</p><p><img src="https://s26.postimg.cc/pqurfozx5/prototype3.png" alt="实例原型与构造函数的关系图"></p><p>综上我们已经得出：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.__proto__ == Person.prototype) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor == Person) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 顺便学习一个ES5的方法,可以获得对象的原型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(person) === Person.prototype) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>了解了构造函数、实例原型、和实例之间的关系，接下来我们讲讲实例和原型的关系：</p><h3 id="实例与原型"><a href="#实例与原型" class="headerlink" title="实例与原型"></a>实例与原型</h3><p>当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。</p><p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">'Kevin'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">person.name = <span class="string">'Daisy'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// Daisy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.name;</span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure></p><p>在这个例子中，我们给实例对象 <code>person</code> 添加了 <code>name</code> 属性，当我们打印 <code>person.name</code> 的时候，结果自然为 Daisy。</p><p>但是当我们删除了 <code>person</code> 的 <code>name</code> 属性时，读取 <code>person.name</code>，从 <code>person</code> 对象中找不到 <code>name</code> 属性就会从 <code>person</code> 的原型也就是 <code>person.__proto__</code> ，也就是 <code>Person.prototype</code>中查找，幸运的是我们找到了 <code>name</code> 属性，结果为 Kevin。</p><p>但是万一还没有找到呢？原型的原型又是什么呢？</p><h4 id="原型的原型"><a href="#原型的原型" class="headerlink" title="原型的原型"></a>原型的原型</h4><p>在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.name = <span class="string">'Kevin'</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name) <span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure></p><p>其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 <code>__proto__</code> 指向构造函数的 <code>prototype</code> ，所以我们再更新下关系图：</p><p><img src="https://s26.postimg.cc/ucqvo2o15/prototype4.png" alt="原型的原型关系图"></p><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p>那 <code>Object.prototype</code> 的原型呢？</p><p>null，我们可以打印：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>然而 null 究竟代表了什么呢？</p><p>引用阮一峰老师的 <a href="http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html" target="_blank" rel="noopener">《undefined与null的区别》</a> 就是：</p><blockquote><p>null 表示“没有对象”，即该处不应该有值。</p></blockquote><p>所以 <code>Object.prototype.__proto__</code> 的值为 null 跟 <code>Object.prototype</code> 没有原型，其实表达了一个意思。</p><p>所以查找属性的时候查到 <code>Object.prototype</code> 就可以停止查找了。</p><p>最后一张关系图也可以更新为：</p><p><img src="https://s26.postimg.cc/8dkh0vuc9/prototype5.png" alt="原型链示意图"></p><p>顺便还要说一下，图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>最后，补充三点大家可能不会注意的地方：</p><h4 id="constructor"><a href="#constructor" class="headerlink" title="constructor"></a>constructor</h4><p>首先是 constructor 属性，我们看个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person.constructor === Person); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>当获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性，所以：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.constructor === Person.prototype.constructor</span><br></pre></td></tr></table></figure></p><h4 id="proto-1"><a href="#proto-1" class="headerlink" title="proto"></a><strong>proto</strong></h4><p>其次是 <code>__proto__</code> ，绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 <code>Person.prototype</code> 中，实际上，它是来自于 <code>Object.prototype</code> ，与其说是一个属性，不如说是一个 <code>getter/setter</code>，当使用 <code>obj.__proto__</code> 时，可以理解成返回了 <code>Object.getPrototypeOf(obj)</code>。</p><h4 id="真的是继承吗？"><a href="#真的是继承吗？" class="headerlink" title="真的是继承吗？"></a>真的是继承吗？</h4><p>最后是关于继承，前面我们讲到“每一个对象都会从原型‘继承’属性”，实际上，继承是一个十分具有迷惑性的说法，引用《你不知道的JavaScript》中的话，就是：</p><p>继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性，相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，<strong>委托</strong>的说法反而更准确些。</p><blockquote><p>推荐阅读:<a href="http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html" target="_blank" rel="noopener">阮一峰Javascript继承机制的设计思想</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      JavaScript从初级往高级走系列，一次学习记录吧，一直在路上
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript从初级往高级走系列————ES6</title>
    <link href="http://yoursite.com/2018/05/10/javascript-es6/"/>
    <id>http://yoursite.com/2018/05/10/javascript-es6/</id>
    <published>2018-05-10T03:50:50.000Z</published>
    <updated>2018-05-10T03:55:27.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><blockquote><p>现在基本上开发中都在使用ES6，浏览器环境支持不好，可以用babel插件来解决。</p></blockquote><p>采用‘二八定律’，主要涉及ES6常用且重要的部分。</p><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><ul><li>ES6模块化如何使用，开发环境如何打包</li><li>Class和普通构造函数有何区别</li><li>Promise的基本使用和原理</li><li>总结一下ES6其他常用功能</li></ul><h3 id="ES6模块化如何使用，开发环境如何打包"><a href="#ES6模块化如何使用，开发环境如何打包" class="headerlink" title="ES6模块化如何使用，开发环境如何打包"></a>ES6模块化如何使用，开发环境如何打包</h3><h4 id="模块化的基本语法"><a href="#模块化的基本语法" class="headerlink" title="模块化的基本语法"></a>模块化的基本语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// util1.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  a : <span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// util2.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn2'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> util1 <span class="keyword">from</span> <span class="string">'./util1.js'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;fn1 , fn2&#125; <span class="keyword">from</span> <span class="string">'./util2.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(util1);</span><br><span class="line">fn1();</span><br><span class="line">fn2();</span><br></pre></td></tr></table></figure><blockquote><p><code>export default</code> 默认输出这个，然后在<code>import</code>的时候就会拿到默认输出的内容。例子中默认输出的<code>a=100</code>。<br><code>export</code>多个内容，在<code>import</code>时需要使用<code>{}</code>进行引用你需要的内容。</p></blockquote><h5 id="export和export-default与exports和module-exports的区别"><a href="#export和export-default与exports和module-exports的区别" class="headerlink" title="export和export default与exports和module.exports的区别"></a><code>export</code>和<code>export default</code>与<code>exports</code>和<code>module.exports</code>的区别</h5><blockquote><p><code>require</code>: node 和 es6 都支持的引入<br><code>export</code> / <code>import</code> : 只有es6 支持的导出引入<br><code>module.exports</code> / <code>exports</code>: 只有 node 支持的导出</p></blockquote><p><code>Node</code>里面的模块系统遵循的是CommonJS规范。</p><blockquote><p>CommonJS定义的模块分为: 模块标识(<code>module</code>)、模块定义(<code>exports</code>) 、模块引用(<code>require</code>)</p></blockquote><p>在nodejs，<code>exports</code> 是 <code>module.exports</code>的引用，初始化时，它们都指向同一个<code>{}</code>对象。</p><p>对象在JS中属于引用类型，意思就是<code>exports</code>和<code>module.exports</code>是指向同一个内存地址的。<br><img src="https://i.imgur.com/pA9FAlZ.png" alt=""></p><p>看下面的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exports.fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这两种情况的效果是一样的，上面说了exports与`module.exports初始化同一个对象，所以两种定义方就是给这个同对象定义了一个fn的属性，该属性值为一个函数。</span></span><br><span class="line"><span class="built_in">module</span>.exports.fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这两种情况就不一样了。上面的exports想当于指向了另一个内存地址。而下面这种情况是可以正常导出的。</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在实际开发当中可以只使用<code>module.exports</code>避免造成不必要的问题。</p></blockquote><h4 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h4><h5 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h5><p><a href="https://babeljs.cn/" target="_blank" rel="noopener">Babel中文网</a></p><ul><li>nodejs环境 npm init</li><li>npm i babel-core babel-preset-es2015 babel-preset-latest –save-dev</li><li>创建.babelrc文件</li><li>npm i –global babel-cli</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"es2015"</span>,<span class="string">"latest"</span>],</span><br><span class="line">  <span class="string">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h5><p><a href="https://finget.github.io/2018/02/08/webpack/" target="_blank" rel="noopener">四大维度解锁webpack3笔记</a></p><h5 id="rollup-js"><a href="#rollup-js" class="headerlink" title="rollup.js"></a>rollup.js</h5><p><a href="http://www.rollupjs.com/" target="_blank" rel="noopener">Rollup.js官网</a></p><ul><li><code>npm init</code></li><li>安装 <code>rollup.js</code>需要的一些插件<br><code>npm i rollup rollup-plugin-node-resolve rollup-plugin-babel babel-core babel-plugin-external-helpers babel-preset-latest --save-dev</code></li><li>配置 .babelrc</li><li>配置 rollup.config.js</li></ul><blockquote><p>rollup 功能单一（打包js模块化）， webpack功能强大<br>工具尽量功能单一，可继承，可扩展</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>:[</span><br><span class="line">    [<span class="string">"latest"</span>, &#123;</span><br><span class="line">      <span class="string">"es2015"</span>:&#123;</span><br><span class="line">        <span class="string">"modules"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>:[<span class="string">"external-helpers"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">'rollup-plugin-babel'</span>;</span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'rollup-plugin-node-resolve'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  entry: <span class="string">'src/index.js'</span>,</span><br><span class="line">  format: <span class="string">'umd'</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    resolve(),</span><br><span class="line">    babel(&#123;</span><br><span class="line">      exclude: <span class="string">'node_modules/**'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  dest: <span class="string">'build/bundle.js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">...</span><br><span class="line"><span class="string">"scripts"</span>:&#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"rollup -c rollup.config.js"</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>npm run start</code></p><h4 id="关于JS众多模块化标准"><a href="#关于JS众多模块化标准" class="headerlink" title="关于JS众多模块化标准"></a>关于JS众多模块化标准</h4><ul><li>没有模块化</li><li>AMD成为标准，require.js</li><li>前端打包工具，使得nodejs模块化（CommonJS）可以被使用</li><li>ES6出现，想统一现在所有模块化标准</li><li>nodejs积极支持，浏览器尚未统一</li><li>你可以自造lib，但是不要自造标准！！！</li></ul><h3 id="Class和普通构造函数有何区别"><a href="#Class和普通构造函数有何区别" class="headerlink" title="Class和普通构造函数有何区别"></a>Class和普通构造函数有何区别</h3><h4 id="JS构造函数"><a href="#JS构造函数" class="headerlink" title="JS构造函数"></a>JS构造函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MathHandle</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型扩展</span></span><br><span class="line">MathHandle.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> ManthHandle(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m.add()); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="Class基本语法"><a href="#Class基本语法" class="headerlink" title="Class基本语法"></a>Class基本语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MathHandle</span> </span>&#123; <span class="comment">// 直接跟大括号</span></span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  add() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> ManthHandle(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m.add()); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h4><blockquote><p><code>typeof MathHandle</code>  = <code>&#39;function&#39;</code><br><code>MathHandle</code>其实是个<code>function</code>,‘构造函数’<br><code>MathHandle</code> === <code>MathHandle.prototype.constructor</code></p></blockquote><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="原生js继承"><a href="#原生js继承" class="headerlink" title="原生js继承"></a>原生js继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动物</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'animal eat'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 狗</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.bark = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'dog bark'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绑定原型，实现继承</span></span><br><span class="line">Dog.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line"><span class="comment">// 实例化一只狗</span></span><br><span class="line"><span class="keyword">var</span> hashiqi = <span class="keyword">new</span> Dog();</span><br><span class="line"></span><br><span class="line"><span class="comment">// hashiqi就有了eat方法</span></span><br><span class="line">hashiqi.eat(); <span class="comment">// animal eat</span></span><br></pre></td></tr></table></figure><blockquote><p>廖雪峰老师的原型继承：<a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000" target="_blank" rel="noopener">点这里</a></p></blockquote><h4 id="ES6继承"><a href="#ES6继承" class="headerlink" title="ES6继承"></a>ES6继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> eat`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123; <span class="comment">// extends 继承</span></span><br><span class="line">  <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">    <span class="keyword">super</span>(name); <span class="comment">// 必须*  记得用super调用父类的构造方法!</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  say() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> say`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">'hashiqi'</span>);</span><br><span class="line">dog.eat(); <span class="comment">// hashiqi eat</span></span><br></pre></td></tr></table></figure><h3 id="Promise-的基础使用"><a href="#Promise-的基础使用" class="headerlink" title="Promise 的基础使用"></a>Promise 的基础使用</h3><blockquote><p>解决回调地狱（Callback Hell）<br>详细点的Promise：<a href="https://finget.github.io/2018/03/08/promise/" target="_blank" rel="noopener">点这里</a></p></blockquote><h4 id="Promise-基础语法"><a href="#Promise-基础语法" class="headerlink" title="Promise 基础语法"></a>Promise 基础语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 一段耗时很长的异步操作</span></span><br><span class="line">.....</span><br><span class="line">  resolve(); <span class="comment">// 数据处理完成</span></span><br><span class="line">  reject(); <span class="comment">// 数据处理出错</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 成功，下一步</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 失败，做相应处理</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>我最开始接触到<code>Promise</code>的时候，一直傻了吧唧的在想<code>resolve()</code>和<code>reject()</code>在什么时候调用。<br><code>resolve()</code>和<code>reject()</code>就是为后面<code>then()</code>中的两个函数服务的。</p></blockquote><h4 id="resolve和reject"><a href="#resolve和reject" class="headerlink" title="resolve和reject"></a>resolve和reject</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    resolve(<span class="string">'good，我要传给then里的一个函数'</span>);</span><br><span class="line">  &#125;,<span class="number">2000</span>);</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    reject(<span class="string">'错了，把我给我then里的第二个函数'</span>);</span><br><span class="line">  &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// good，我要传给then里的一个函数</span></span><br><span class="line">&#125;,value =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// 错了，把我给我then里的第二个函数</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="来个实际的例子"><a href="#来个实际的例子" class="headerlink" title="来个实际的例子"></a>来个实际的例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于jquery封装一个promise ajax请求</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; param [选项]</span></span><br><span class="line"><span class="comment"> * @return &#123;[type]&#125;       [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">request(param)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      type : param.type || <span class="string">'get'</span>,</span><br><span class="line">      url : param.url || <span class="string">''</span>,</span><br><span class="line">      dataType : param.dataType || <span class="string">'json'</span>,</span><br><span class="line">      data : param.data || <span class="literal">null</span>,</span><br><span class="line">      success:<span class="function">(<span class="params">res</span>)=&gt;</span>&#123; <span class="comment">// 用箭头函数避免this指向问题</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> === res.status) &#123;</span><br><span class="line">       <span class="keyword">typeof</span> resolve === <span class="string">'function'</span>&amp;&amp;resolve(res.data, res.msg); <span class="comment">// 成功就把请求到的数据用resolve返回，这样就可以在then的第一个函数里拿到值了</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">typeof</span> reject === <span class="string">'function'</span>&amp;&amp;reject(res.msg || res.data); <span class="comment">// 失败就返回错误信息</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      error:<span class="function">(<span class="params">err</span>)=&gt;</span>&#123; <span class="comment">// 这个失败是请求失败，上面那个失败是请求成功发送了，但是没有拿到数据失败了</span></span><br><span class="line">     <span class="keyword">typeof</span> reject === <span class="string">'function'</span>&amp;&amp;reject(err.statusText);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ES6常用其他功能"><a href="#ES6常用其他功能" class="headerlink" title="ES6常用其他功能"></a>ES6常用其他功能</h3><h4 id="let-const"><a href="#let-const" class="headerlink" title="let/const"></a>let/const</h4><blockquote><p><code>let</code> <code>const</code>与<code>var</code>都是用来定义变量的，不同的是<code>let</code>自带作用域，<code>const</code>不能重复赋值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'FinGet'</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">'GetFin'</span></span><br><span class="line">    <span class="built_in">console</span>.log(name)  <span class="comment">//GetFin</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name)  <span class="comment">//FinGet</span></span><br></pre></td></tr></table></figure><blockquote><p><code>let</code>定义的变量只在包含它的代码块内有用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line">PI = <span class="number">3.14</span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><h4 id="多行字符串-模板变量"><a href="#多行字符串-模板变量" class="headerlink" title="多行字符串/模板变量"></a>多行字符串/模板变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'FinGet'</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">22</span>;</span><br><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'我是'</span>+ name+<span class="string">',今年'</span>+age+<span class="string">'岁'</span>; <span class="comment">// 很麻烦</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">`我是<span class="subst">$&#123;name&#125;</span>,今年<span class="subst">$&#123;age&#125;</span>岁`</span>; <span class="comment">// 简单多了</span></span><br></pre></td></tr></table></figure><blockquote><p>模板字符串就是用<code></code>（Tab键上面那个）包含，变量就是用<code>${}</code>表示</p></blockquote><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'FinGet'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  job: <span class="string">'前端'</span>,</span><br><span class="line">  addr: <span class="string">'成都'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125; = obj;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// FinGet</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 22</span></span><br></pre></td></tr></table></figure><p>还可以反过来：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  name = <span class="string">'FinGet'</span>;</span><br><span class="line"><span class="keyword">let</span>  age = <span class="number">22</span>;</span><br><span class="line"><span class="keyword">let</span>  job = <span class="string">'前端'</span>;</span><br><span class="line"><span class="keyword">let</span>  addr = <span class="string">'成都'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;name,age,job,addr&#125;;</span><br><span class="line"><span class="comment">//obj = &#123;name: 'FinGet',age: 22,job: '前端',addr: '成都'&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h4><p>另外一个<code>var</code>带来的不合理场景就是用来计数的循环变量泄露为全局变量，看下面的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></p><blockquote><p>let 自带块级作用域</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>原生js想实现这种效果，需要用到闭包：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123; <span class="comment">// 立即执行函数</span></span><br><span class="line">    a[j] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(j);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;(i))</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><blockquote><p>立即执行函数形成了一个块级作用域，将参数j保存了下来，并不会被‘污染’，原生js没有块级作用域，<code>var</code>在<code>for</code>中定义的变量是个全局变量，可以在外部访问，也就可以被改变，所以每次<code>for</code>循环都是重置修改<code>i</code>的值，导致最后只能输出10。</p></blockquote><h4 id="函数默认参数与rest"><a href="#函数默认参数与rest" class="headerlink" title="函数默认参数与rest"></a>函数默认参数与rest</h4><blockquote><p><code>default</code>很简单，意思就是默认值。大家可以看下面的例子，调用animal()方法时忘了传参数，传统的做法就是加上这一句<code>type = type || &#39;cat&#39;</code>来指定默认值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animal</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">    type = type || <span class="string">'cat'</span>  </span><br><span class="line">    <span class="built_in">console</span>.log(type)</span><br><span class="line">&#125;</span><br><span class="line">animal()</span><br></pre></td></tr></table></figure><p>如果用ES6我们而已直接这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animal</span>(<span class="params">type = <span class="string">'cat'</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(type)</span><br><span class="line">&#125;</span><br><span class="line">animal(); <span class="comment">// cat</span></span><br></pre></td></tr></table></figure><p>最后一个rest语法也很简单，直接看例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animals</span>(<span class="params">...types</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(types)</span><br><span class="line">&#125;</span><br><span class="line">animals(<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'fish'</span>) <span class="comment">//["cat", "dog", "fish"]</span></span><br></pre></td></tr></table></figure><blockquote><p>而如果不用ES6的话，我们则得使用ES5的arguments。</p></blockquote><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es6箭头函数</span></span><br><span class="line">(a,b) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>把<code>function</code>去掉，在<code>()</code>与<code>{}</code>之间加上<code>=&gt;</code></p></blockquote><hr><blockquote><p>当我们使用箭头函数时，函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象。<br>并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的<code>this</code>，它的<code>this</code>是继承外面的，因此内部的<code>this</code>就是外层代码块的<code>this</code>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      JavaScript从初级往高级走系列，一次学习记录吧，一直在路上
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>在线考试系统（vue2 + elementui + express4 + MongoDB）</title>
    <link href="http://yoursite.com/2018/05/05/exam/"/>
    <id>http://yoursite.com/2018/05/05/exam/</id>
    <published>2018-05-05T07:05:55.000Z</published>
    <updated>2018-05-10T08:53:10.941Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是我毕业项目，从0到1，前后台独立开发完成。功能不多，在此记录,温故而知新！项目github地址:<a href="https://github.com/FinGet/Exam" target="_blank" rel="noopener">https://github.com/FinGet/Exam</a> ，博客地址：<a href="https://finget.github.io/" target="_blank" rel="noopener">https://finget.github.io/</a>。</p></blockquote><hr><blockquote><p>更新记录：2018-4-9，md5加密</p></blockquote><h2 id="win10安装mongodb"><a href="#win10安装mongodb" class="headerlink" title="win10安装mongodb"></a>win10安装mongodb</h2><p>window下安装mongodb，需要参考的可以移步我的博客中：<a href="https://finget.github.io/2018/05/05/win-mongodb/" target="_blank" rel="noopener">win10安装mongodb</a></p><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><p>本次项目使用的是express4 + vue2+ + elementUI1+ + mongodb3.4+</p><p>先看项目文件目录结构：</p><p><img src="https://i.imgur.com/RV9862f.png" alt=""></p><blockquote><p>我页面用的vue所以<code>server/views</code>和<code>server/public</code>都没有用</p></blockquote><ul><li>项目建立用的是vue-cli:<br><code>vue init webpack exam</code></li><li>项目中前后台是写在一个项目中的：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i -g express-generator</span><br><span class="line"><span class="comment">// 在项目文件根目录下</span></span><br><span class="line">express server</span><br></pre></td></tr></table></figure></li></ul><p>由于前后台都是写在一个项目中的，我就将<code>server</code>下的<code>package.json</code>和<code>vue</code>下的<code>package.json</code>合并了</p><p><img src="https://i.imgur.com/a5uBeQh.png" alt=""></p><h3 id="安装一些插件"><a href="#安装一些插件" class="headerlink" title="安装一些插件"></a>安装一些插件</h3><h4 id="axios-请求数据"><a href="#axios-请求数据" class="headerlink" title="axios 请求数据"></a>axios 请求数据</h4><p><code>npm i axios --save</code><br>首先axios不支持vue.use()式声明<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在main.js中如下声明使用</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line">Vue.prototype.$axios=axios;</span><br><span class="line"><span class="comment">// 那么在其他vue组件中就可以this.$axios调用使用</span></span><br></pre></td></tr></table></figure></p><h4 id="elementUI"><a href="#elementUI" class="headerlink" title="elementUI"></a>elementUI</h4><p><code>npm i element-ui --save</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span> <span class="comment">// 加载ElementUI</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-default/index.css'</span></span><br><span class="line">Vue.use(ElementUI) <span class="comment">// 全局使用elementUI</span></span><br></pre></td></tr></table></figure></p><h4 id="vue-lazyload-图片懒加载"><a href="#vue-lazyload-图片懒加载" class="headerlink" title="vue-lazyload 图片懒加载"></a>vue-lazyload 图片懒加载</h4><p><code>npm i vue-lazyload --save</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> VueLazyLoad <span class="keyword">from</span> <span class="string">'vue-lazyload'</span></span><br><span class="line">Vue.use(VueLazyLoad, &#123; <span class="comment">// 全局使用图片懒加载</span></span><br><span class="line">  loading: <span class="string">'static/loading-svg/loading-bars.svg'</span>, <span class="comment">// 图片还没加载时的svg图片</span></span><br><span class="line">  <span class="keyword">try</span>: <span class="number">1</span> <span class="comment">// default 1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>使用懒加载：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img width=<span class="string">"300"</span> height=<span class="string">"53"</span> v-lazy=<span class="string">"logoSrc"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">logoSrc:<span class="built_in">require</span>(<span class="string">'../common/img/logo.png'</span>)</span><br><span class="line"><span class="comment">// 不能写成：&lt;img width="300" height="53" v-lazy="../common/img/logo.png" alt=""&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="mongoose-操作mongodb的"><a href="#mongoose-操作mongodb的" class="headerlink" title="mongoose 操作mongodb的"></a>mongoose 操作mongodb的</h4><p><code>npm i mongoose --save</code></p><blockquote><p>就不一一列举所有的插件了（没有用vuex）</p></blockquote><h2 id="开发上的一些事"><a href="#开发上的一些事" class="headerlink" title="开发上的一些事"></a>开发上的一些事</h2><h3 id="前台相关"><a href="#前台相关" class="headerlink" title="前台相关"></a>前台相关</h3><h4 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// commonFun.js</span></span><br><span class="line"><span class="comment">//获取sessionStorage</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSessionStorage</span>(<span class="params">key, format</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data;</span><br><span class="line">  <span class="keyword">if</span> (sessionStorage.getItem(key)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (format == <span class="string">'json'</span>) &#123;</span><br><span class="line">      data = <span class="built_in">JSON</span>.parse(sessionStorage.getItem(key));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      data = sessionStorage.getItem(key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    data = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写入sessionStorage</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSessionStorage</span>(<span class="params">key, content, format</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data;</span><br><span class="line">  <span class="keyword">if</span> (format == <span class="string">'json'</span>) &#123;</span><br><span class="line">    data = <span class="built_in">JSON</span>.stringify(content);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    data = content;</span><br><span class="line">  &#125;</span><br><span class="line">  sessionStorage.setItem(key, data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> mySessionStorage = &#123;</span><br><span class="line">  get: getSessionStorage,</span><br><span class="line">  set: setSessionStorage</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局挂载<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> commonFun <span class="keyword">from</span> <span class="string">'./common/js/commonFun.js'</span></span><br><span class="line">Vue.prototype.$mySessionStorage = commonFun.mySessionStorage;</span><br></pre></td></tr></table></figure></p><p>在页面中使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$mySessionStorage.set(key,content,format);</span><br><span class="line"><span class="keyword">this</span>.$mySessionStorage.get(key);</span><br></pre></td></tr></table></figure></p><h4 id="登录检测"><a href="#登录检测" class="headerlink" title="登录检测"></a>登录检测</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="comment">// 登录判断</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> userdata = getUserData();</span><br><span class="line">  <span class="keyword">if</span> (to.path != <span class="string">'/managelogin'</span>&amp;&amp;to.name!=<span class="string">'404'</span>&amp;&amp;to.path != <span class="string">'/'</span>&amp;&amp;to.path != <span class="string">"/frontregister"</span>&amp;&amp;to.path!=<span class="string">'/manageregister'</span>) &#123;  <span class="comment">// 判断是否登录</span></span><br><span class="line">    <span class="keyword">if</span>(!userdata.userName)&#123;</span><br><span class="line">      ElementUI.Message.error(<span class="string">'抱歉，您还没有登录！'</span>);</span><br><span class="line">      <span class="keyword">if</span>(to.path.indexOf(<span class="string">'front'</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        router.push(&#123;<span class="attr">path</span>:<span class="string">'/'</span>&#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        router.push(&#123;<span class="attr">path</span>:<span class="string">'/managelogin'</span>&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="面包屑导航"><a href="#面包屑导航" class="headerlink" title="面包屑导航"></a>面包屑导航</h4><blockquote><p>绑定面包屑要根据实际情况来定，但是<code>this.$router.currentRoute.matched</code>是最主要的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"bread"</span>&gt;</span><br><span class="line">    &lt;el-breadcrumb separator=<span class="string">"/"</span>&gt;</span><br><span class="line">      &lt;el-breadcrumb-item v-<span class="keyword">for</span>=<span class="string">"(item, index) in breadData"</span> :key=<span class="string">"item.id"</span> :to=<span class="string">"&#123; name: item.meta.breadName=='管理系统'?'Index':item.name &#125;"</span>&gt;&#123;&#123;item.meta.breadName&#125;&#125;&lt;<span class="regexp">/el-breadcrumb-item&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-breadcrumb&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/ecmascript-6"</span>&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        breadData:[]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      $route () &#123;</span><br><span class="line">        <span class="keyword">this</span>.initBreadData();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      <span class="comment">//面包屑</span></span><br><span class="line">      initBreadData()&#123;</span><br><span class="line">        <span class="keyword">this</span>.breadData=<span class="keyword">this</span>.$router.currentRoute.matched;</span><br><span class="line">        <span class="comment">// console.log(this.breadData)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">      <span class="keyword">this</span>.initBreadData();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>路由部分：</p><p><img src="https://i.imgur.com/pagOWnL.png" alt=""></p><h4 id="elementui面包屑导航与左侧导航相对应"><a href="#elementui面包屑导航与左侧导航相对应" class="headerlink" title="elementui面包屑导航与左侧导航相对应"></a>elementui面包屑导航与左侧导航相对应</h4><blockquote><p>根据实际情况来，不能套用，要看你的路由怎么写的 <code>this.$router.currentRoute.path</code><br><code>:default-active=&quot;activeIndex&quot;</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// conponents/sidebar.vue</span></span><br><span class="line"><span class="comment">//初始化列表active状态</span></span><br><span class="line">...</span><br><span class="line">methods:&#123;</span><br><span class="line">  initActiveIndex()&#123;</span><br><span class="line">    <span class="comment">// var str =this.$router.currentRoute.path;</span></span><br><span class="line">    <span class="keyword">this</span>.activeIndex=<span class="keyword">this</span>.$router.currentRoute.path;</span><br><span class="line">    <span class="comment">// console.log(str)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">  <span class="string">'$route'</span>:<span class="string">'initActiveIndex'</span></span><br><span class="line">&#125;,</span><br><span class="line">created()&#123;</span><br><span class="line">  <span class="keyword">this</span>.initActiveIndex();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h4><p>要想请求到后台数据，这一步是必须的<br>配置代理之后，localhost:8088/api/<em> -&gt; localhost:3000/api/</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">config/index.js</span><br><span class="line">proxyTable: &#123;</span><br><span class="line">  // proxy all requests starting with /api to jsonplaceholder</span><br><span class="line">  &apos;/api&apos;: &#123;</span><br><span class="line">    target: &apos;http://127.0.0.1:3000/api&apos;, // 端口号根据后台设置来，默认是3000</span><br><span class="line">    changeOrigin: true,</span><br><span class="line">    pathRewrite: &#123;</span><br><span class="line">      &apos;^/api&apos;: &apos;&apos;  // 若target中没有/api、这里又为空，则404；</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h4 id="ElementUi动态增加表单的表单验证-大坑"><a href="#ElementUi动态增加表单的表单验证-大坑" class="headerlink" title="ElementUi动态增加表单的表单验证 大坑"></a>ElementUi动态增加表单的表单验证 大坑</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div  v-<span class="keyword">if</span>=<span class="string">"dialogForm.type!='judgement'&amp;&amp;dialogForm.type!='Q&amp;A'"</span>&gt;</span><br><span class="line">    &lt;el-form-item v-<span class="keyword">for</span>=<span class="string">"(item,index) in dialogForm.surveyQuestionOptionList"</span></span><br><span class="line">    :key=<span class="string">"item.key"</span></span><br><span class="line">    :label=<span class="string">"'选项'+(index+1) +'：'"</span></span><br><span class="line">    :prop=<span class="string">"'surveyQuestionOptionList.' + index + '.optionContent'"</span></span><br><span class="line">    :rules=<span class="string">"&#123;</span></span><br><span class="line"><span class="string">      required:true, message:'选项不能为空', trigger:'blur'</span></span><br><span class="line"><span class="string">    &#125;"</span></span><br><span class="line">    &gt;</span><br><span class="line">    <span class="comment">// 最重要的是prop 一定要带上`.optionContent`，也就是你绑定值的key</span></span><br><span class="line">      &lt;el-input placeholder=<span class="string">"请输入选项"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"dialog_input"</span> v-model=<span class="string">"item.optionContent"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-delete delete-icon"</span> @<span class="attr">click</span>=<span class="string">"deleteDlalogOption(index)"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line">    &lt;el-button type="primary" size="small" class="marginB10" @click="addDialogOption"&gt;添加选项&lt;/el-button&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="query要用path来引入，params要用name来引入"><a href="#query要用path来引入，params要用name来引入" class="headerlink" title="query要用path来引入，params要用name来引入"></a>query要用path来引入，params要用name来引入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">goToExam(id)&#123;</span><br><span class="line"><span class="comment">// params传参只能用name引入</span></span><br><span class="line">  <span class="keyword">this</span>.$router.push(&#123;<span class="attr">name</span>:<span class="string">'ForntExam'</span>,<span class="attr">params</span>:&#123;<span class="attr">id</span>:id&#125;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Elementui-单选框对上单选题"><a href="#Elementui-单选框对上单选题" class="headerlink" title="Elementui 单选框对上单选题"></a>Elementui 单选框对上单选题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"single"</span>&gt;</span><br><span class="line">    &lt;h4&gt;单选题（只有一个正确答案）&lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;li class="marginB10" v-for="(item,index) in singleQuestions" :key="item.id"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p class="question-title"&gt;&#123;&#123;index+1&#125;&#125; 、&#123;&#123;item.name&#125;&#125;（）&lt;/</span>p&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"option"</span></span><br><span class="line">              v-<span class="keyword">if</span>=<span class="string">"item.type!='judgement'&amp;&amp;item.type!='Q&amp;A'"</span>item</span><br><span class="line">              v-<span class="keyword">for</span>=<span class="string">"(item1,index1) in item.selection"</span> :key=<span class="string">"item1.id"</span>&gt;</span><br><span class="line">          &lt;el-radio v-model=<span class="string">"item.sanswer"</span> :label=<span class="string">"options[index1]"</span> :key=<span class="string">"index1"</span>&gt;&#123;&#123;options[index1]&#125;&#125;、&#123;&#123;item1&#125;&#125;&lt;<span class="regexp">/el-radio&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>span&gt;</span><br><span class="line">      &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">init()&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.id == <span class="string">''</span> || !<span class="keyword">this</span>.id )&#123;</span><br><span class="line">    <span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>:<span class="string">'forntexamindex'</span>&#125;);</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$axios.get(<span class="string">'/api/getExamInfo'</span>,&#123;</span><br><span class="line">      params:&#123;</span><br><span class="line">        id: <span class="keyword">this</span>.id</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> res = response.data;</span><br><span class="line">      <span class="keyword">if</span>(res.status == <span class="string">'0'</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> <span class="keyword">this</span>.paperData) &#123;</span><br><span class="line">          <span class="keyword">this</span>.paperData[key] = res.result[key];</span><br><span class="line">        &#125;</span><br><span class="line">        res.result._questions.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(item.type==<span class="string">'single'</span>)&#123;</span><br><span class="line">            item.sanswer = <span class="string">''</span>; <span class="comment">// 重要的在这 给他新增一个属性，用来存答案</span></span><br><span class="line">            <span class="keyword">this</span>.singleQuestions.push(item);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span>(item.type == <span class="string">'multi'</span>)&#123;</span><br><span class="line">            item.sanswer = []; <span class="comment">// 多选题</span></span><br><span class="line">            <span class="keyword">this</span>.multiQuestions.push(item);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span>(item.type == <span class="string">'Q&amp;A'</span>) &#123;</span><br><span class="line">            item.sanswer = <span class="string">''</span>; </span><br><span class="line">            <span class="keyword">this</span>.QAQuestions.push(item);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span>(item.type == <span class="string">'judgement'</span>)&#123;</span><br><span class="line">            item.sanswer = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">this</span>.judgeQuestions.push(item);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$message.error(err);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后台相关"><a href="#后台相关" class="headerlink" title="后台相关"></a>后台相关</h3><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><p>在server根目录下新建<code>db.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db.js</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> dbUrl = <span class="string">'mongodb://127.0.0.1:27017/examSystem'</span>;</span><br><span class="line"><span class="keyword">var</span> db = mongoose.connect(dbUrl);</span><br><span class="line">db.connection.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'数据库链接失败：'</span>+ error);</span><br><span class="line">&#125;);</span><br><span class="line">db.connection.on(<span class="string">'connected'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'数据库链接成功!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">db.connection.on(<span class="string">'disconnected'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Mongoose connection disconnected'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = db;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server/app.js</span></span><br><span class="line"><span class="comment">// 链接数据库</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./db'</span>);</span><br></pre></td></tr></table></figure><h4 id="配置seesion"><a href="#配置seesion" class="headerlink" title="配置seesion"></a>配置seesion</h4><p>需要<code>express-session</code> 和 <code>cookie-parser</code>插件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="comment">// 加载解析session的中间件</span></span><br><span class="line"><span class="comment">// session 的 store 有四个常用选项：1）内存 2）cookie 3）缓存 4）数据库</span></span><br><span class="line"><span class="comment">// 数据库 session。除非你很熟悉这一块，知道自己要什么，否则还是老老实实用缓存吧 需要用到（connect-mongo插件 line 7）</span></span><br><span class="line"><span class="comment">// app.use(sessionParser(&#123; 会在数据库中新建一个session集合存储session</span></span><br><span class="line"><span class="comment">// secret: 'express',</span></span><br><span class="line"><span class="comment">// store: new mongoStore(&#123;</span></span><br><span class="line"><span class="comment">// url:'mongodb://127.0.0.1:27017/examSystem',</span></span><br><span class="line"><span class="comment">// collection:'session'</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// &#125;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认使用内存来存 session，对于开发调试来说很方便</span></span><br><span class="line">app.use(sessionParser(&#123;</span><br><span class="line">  secret: <span class="string">'12345'</span>, <span class="comment">// 建议使用 128 个字符的随机字符串</span></span><br><span class="line">  name: <span class="string">'userInfo'</span>,</span><br><span class="line">  cookie: &#123; <span class="attr">maxAge</span>: <span class="number">1800000</span> &#125;, <span class="comment">// 时间可以长点</span></span><br><span class="line">  resave:<span class="literal">true</span>,</span><br><span class="line">  rolling:<span class="literal">true</span>,</span><br><span class="line">  saveUninitialized:<span class="literal">false</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p><h4 id="配置后台路由"><a href="#配置后台路由" class="headerlink" title="配置后台路由"></a>配置后台路由</h4><p>默认的使用方式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// appi.js</span></span><br><span class="line"><span class="keyword">var</span> index = <span class="built_in">require</span>(<span class="string">'./routes/index'</span>);</span><br><span class="line">app.use(<span class="string">'/'</span>, index);</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes/index</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">   res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'Express'</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>我之前做的一个电子商城采用的这种方式：<a href="https://github.com/FinGet/Node-vue-mongodb" target="_blank" rel="noopener">github地址</a></p><p>我的项目中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">var</span> indexs = <span class="built_in">require</span>(<span class="string">'./routes/index'</span>);</span><br><span class="line"><span class="keyword">var</span> routes = <span class="built_in">require</span>(<span class="string">'./routes/routes'</span>);</span><br><span class="line"></span><br><span class="line">indexs(app);</span><br><span class="line">routes(app);</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes/index.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.get(<span class="string">'/api'</span>, (req, res) =&gt; &#123;</span><br><span class="line">res.render(<span class="string">'index'</span>, &#123;<span class="attr">title</span>: <span class="string">'Express'</span>&#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种方式有什么不同：</p><ul><li>如果你有多个路由文件 （例如<code>goods.js</code>,<code>index.js</code>,<code>users.js</code>……）,你都需要去app.js中引入</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">var</span> index = <span class="built_in">require</span>(<span class="string">'./routes/index'</span>);</span><br><span class="line"><span class="keyword">var</span> users = <span class="built_in">require</span>(<span class="string">'./routes/users'</span>);</span><br><span class="line"><span class="keyword">var</span> goods = <span class="built_in">require</span>(<span class="string">'./routes/goods'</span>);</span><br><span class="line">app.use(<span class="string">'/'</span>, index);</span><br><span class="line">app.use(<span class="string">'/users'</span>, users);</span><br><span class="line">app.use(<span class="string">'/goods'</span>, goods);</span><br></pre></td></tr></table></figure><p>在前台请求的时候：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// goods.js</span></span><br><span class="line">....</span><br><span class="line">router.get(<span class="string">"/list"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xxx.vue</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">this</span>.$axios.get(<span class="string">'/goods/list'</span>).then()... <span class="comment">// 不能忘了加上goods，也就是你在app.js中定义的一级路由</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>如果没看懂，可以去<a href="https://github.com/FinGet/Node-vue-mongodb" target="_blank" rel="noopener">GitHub</a>上看一下实际代码，有助于理解</p></blockquote><ul><li>第二种方式<br>不用在app.js中引入各个路由文件，一个<code>route.js</code>就搞定了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// route.js</span></span><br><span class="line"><span class="keyword">var</span> Teacher = <span class="built_in">require</span>(<span class="string">'../controllers/teacher'</span>),</span><br><span class="line">    Student = <span class="built_in">require</span>(<span class="string">'../controllers/student'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*----------------------教师用户----------------------*/</span></span><br><span class="line">  app.post(<span class="string">'/api/register'</span>,Teacher.register);</span><br><span class="line">  <span class="comment">// 用户登录</span></span><br><span class="line">  app.post(<span class="string">'/api/login'</span>, Teacher.signup);</span><br><span class="line">  <span class="comment">// 登出</span></span><br><span class="line">  app.post(<span class="string">"/api/logout"</span>, Teacher.signout);</span><br><span class="line">  <span class="comment">// 获取用户信息</span></span><br><span class="line">  app.post(<span class="string">'/api/getUserInfo'</span>,Teacher.getUserInfo);</span><br><span class="line">  <span class="comment">// 修改用户信息</span></span><br><span class="line">  app.post(<span class="string">'/api/updateUser'</span>, Teacher.updateUser);</span><br><span class="line">  <span class="comment">// 获取试卷(分页、模糊查询)</span></span><br><span class="line">  app.get(<span class="string">'/api/mypapers'</span>, Teacher.getPapers);</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*----------------------学生用户----------------------*/</span></span><br><span class="line">  <span class="comment">// 学生注册</span></span><br><span class="line">  app.post(<span class="string">'/api/studentregister'</span>,Student.register);</span><br><span class="line">  <span class="comment">// 学生登录</span></span><br><span class="line">  app.post(<span class="string">'/api/studentlogin'</span>, Student.signup);</span><br><span class="line">  ....</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，我将每个路由的方法都是提取出去的，这样可以避免这个文件不会有太多的代码，可读性降低，将代码分离开来，也有助于维护</p><p><img src="https://i.imgur.com/19bvKRe.png" alt=""></p><p>在使用的时候：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xxx.vue</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">this</span>.$axios.get(<span class="string">'/api/getexamlogs'</span>).then()... </span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="数据库的相关操作"><a href="#数据库的相关操作" class="headerlink" title="数据库的相关操作"></a>数据库的相关操作</h4><p>我这次用mongodb，主要是因为可以用js来操作，对我来说比较简单，mysql我不会用。在实际开发过程中发现，考试系统各个表（集合）都是需要关联，mongodb这种非关系型数据库，做起来反而麻烦了不少。在此将一些数据库增删改查的方法回顾一下。</p><h5 id="初始化一条数据"><a href="#初始化一条数据" class="headerlink" title="初始化一条数据"></a>初始化一条数据</h5><blockquote><p>如果对mongodb，mongoose没有基础的了解，建议看一看<a href="https://www.villainhr.com/page/2016/05/11/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmongoose" target="_blank" rel="noopener">mongoose深入浅出</a> ，<a href="https://segmentfault.com/a/1190000014736907" target="_blank" rel="noopener">mongoose基础操作</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controllers/student.js</span></span><br><span class="line"><span class="keyword">const</span> Student = <span class="built_in">require</span>(<span class="string">'../model/student'</span>);</span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student(&#123;</span><br><span class="line">    userId: <span class="number">12001</span>, <span class="comment">// 学号</span></span><br><span class="line">    userName: <span class="string">'张三'</span>, <span class="comment">// 用户名</span></span><br><span class="line">    passWord: <span class="string">'123321'</span>, <span class="comment">// 密码</span></span><br><span class="line">    grade: <span class="number">3</span>, <span class="comment">// 年级 1~6 分别代表一年级到六年级</span></span><br><span class="line">    class: 3, // 班级</span><br><span class="line">    exams:[&#123; <span class="comment">// 参加的考试</span></span><br><span class="line">      _paper:Schema.Types.ObjectId(<span class="string">"5a40a4ef485a584d44764ff1"</span>), <span class="comment">// 这个是_id，在mongodb自动生成的，从数据库复制过来，初始化一个学生，应该是没有参加考试的</span></span><br><span class="line">      score:<span class="number">100</span>,</span><br><span class="line">      date: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">      answers: []</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 保存</span></span><br><span class="line">student.save(<span class="function">(<span class="params">err,doc</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="用户注册，其实就是创建一条数据"><a href="#用户注册，其实就是创建一条数据" class="headerlink" title="用户注册，其实就是创建一条数据"></a>用户注册，其实就是创建一条数据</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">exports.register = <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> userInfo = req.body.userInfo; <span class="comment">// req.body 获取post方式传递的参数</span></span><br><span class="line">  Student.findOne(userInfo,(err,doc) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">      ...</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">if</span>(doc) &#123;</span><br><span class="line">         res.json(&#123;</span><br><span class="line">           status:<span class="string">'2'</span>,</span><br><span class="line">           msg: <span class="string">'用户已存在'</span></span><br><span class="line">         &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          userInfo.exams = [];</span><br><span class="line">          <span class="comment">// userInfo 是个对象，包含了用户相关的信息</span></span><br><span class="line">          Student.create(userInfo,(err1,doc1) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span>(err1) &#123;</span><br><span class="line">            ...</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(doc1) &#123;</span><br><span class="line">              ...</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             ...</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h5 id="获取考试记录-子文档数组分页模糊查询"><a href="#获取考试记录-子文档数组分页模糊查询" class="headerlink" title="获取考试记录,子文档数组分页模糊查询"></a>获取考试记录,子文档数组分页模糊查询</h5><p>如下图是我的<code>student</code>集合:</p><p><img src="https://i.imgur.com/sjKcFYU.png" alt=""><br>在该集合中，学生参加过的考试记录，存在<code>exams</code>数组中，当想实现分页查询几条数据的时候，需要用到<code>$slice</code></p><blockquote><p><code>$slice:[start,size]</code>  第一个参数表示，数组开始的下标，第二个表示截取的数量<br>在后台接收到前台传递的<code>pageSize</code>和<code>pageNumber</code>时，需要计算出当前需要截取的下标，即<code>let  skip = (pageNumber-1)*pageSize</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">exports.getExamLogs = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> userName =req.session.userName;</span><br><span class="line">  <span class="keyword">let</span> name = req.param(<span class="string">'name'</span>);</span><br><span class="line">    <span class="comment">// 通过req.param()取到的值都是字符串，而limit()需要一个数字作为参数</span></span><br><span class="line">  <span class="keyword">let</span>  pageSize = <span class="built_in">parseInt</span>(req.param(<span class="string">'pageSize'</span>));</span><br><span class="line">  <span class="keyword">let</span>  pageNumber = <span class="built_in">parseInt</span>(req.param(<span class="string">'pageNumber'</span>));</span><br><span class="line">  <span class="keyword">let</span>  skip = (pageNumber<span class="number">-1</span>)*pageSize; <span class="comment">// 跳过几条</span></span><br><span class="line">  <span class="keyword">let</span>  reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(name,<span class="string">'i'</span>); <span class="comment">// 在nodejs中，必须要使用RegExp，来构建正则表达式对象。</span></span><br><span class="line">  Student.findOne(&#123;<span class="string">"userName"</span>:userName&#125;,&#123;<span class="string">"exams"</span>:&#123;<span class="attr">$slice</span>:[skip,pageSize]&#125;&#125;).populate(&#123;<span class="attr">path</span>:<span class="string">'exams._paper'</span>,<span class="attr">match</span>:&#123;<span class="attr">name</span>: reg&#125;&#125;)</span><br><span class="line">    .exec(<span class="function">(<span class="params">err,doc</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (doc) &#123;</span><br><span class="line">          res.json(&#123;</span><br><span class="line">            status: <span class="string">'0'</span>,</span><br><span class="line">            msg:<span class="string">'success'</span>,</span><br><span class="line">            result:doc,</span><br><span class="line">            count: doc.exams.length?doc.exams.length:<span class="number">0</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="另一种分页模糊查询–在文档之间（document）"><a href="#另一种分页模糊查询–在文档之间（document）" class="headerlink" title="另一种分页模糊查询–在文档之间（document）"></a>另一种分页模糊查询–在文档之间（document）</h5><p><img src="https://i.imgur.com/je9ierB.png" alt=""></p><blockquote><p>每个试卷都是独立的文档，通过他们的名称<code>name</code>实现模糊查询</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取考试信息</span></span><br><span class="line">exports.getExams = <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> userName =req.session.userName;</span><br><span class="line">  <span class="keyword">let</span> name = req.param(<span class="string">'name'</span>);</span><br><span class="line">    <span class="comment">// 通过req.param()取到的值都是字符串，而limit()需要一个数字作为参数</span></span><br><span class="line">  <span class="keyword">let</span>  pageSize = <span class="built_in">parseInt</span>(req.param(<span class="string">'pageSize'</span>));</span><br><span class="line">  <span class="keyword">let</span>  pageNumber = <span class="built_in">parseInt</span>(req.param(<span class="string">'pageNumber'</span>));</span><br><span class="line">  <span class="keyword">let</span> skip = (pageNumber<span class="number">-1</span>)*pageSize; <span class="comment">// 跳过几条</span></span><br><span class="line">  <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(name,<span class="string">'i'</span>); <span class="comment">// 在nodejs中，必须要使用RegExp，来构建正则表达式对象。</span></span><br><span class="line">  Student.findOne(&#123;<span class="string">"userName"</span>:userName&#125;,(err,doc)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">      res.json(&#123;</span><br><span class="line">        status: <span class="string">'1'</span>,</span><br><span class="line">        msg: err.message</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(doc) &#123;</span><br><span class="line">      <span class="comment">// 关键在这里</span></span><br><span class="line">        Paper.find(&#123;<span class="attr">startTime</span>:&#123;<span class="attr">$exists</span>:<span class="literal">true</span>&#125;,<span class="attr">name</span>:reg&#125;).skip(skip).limit(pageSize).populate(&#123;<span class="attr">path</span>:<span class="string">'_questions'</span>&#125;).exec(<span class="function">(<span class="params">err1,doc1</span>)=&gt;</span>&#123;</span><br><span class="line">        ....  </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="还有一种模糊分页查询–查询关联文档再模糊分页查询"><a href="#还有一种模糊分页查询–查询关联文档再模糊分页查询" class="headerlink" title="还有一种模糊分页查询–查询关联文档再模糊分页查询"></a>还有一种模糊分页查询–查询关联文档再模糊分页查询</h5><p><img src="https://i.imgur.com/T5uaimo.png" alt=""></p><blockquote><p>先通过<code>populate</code>查询除关联文档，在模糊分页查询</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">exports.getPapers = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// console.log(req.session.userName);</span></span><br><span class="line">  <span class="keyword">let</span> name = req.param(<span class="string">'name'</span>),</span><br><span class="line">    <span class="comment">// 通过req.param()取到的值都是字符串，而limit()需要一个数字作为参数</span></span><br><span class="line">    pageSize = <span class="built_in">parseInt</span>(req.param(<span class="string">'pageSize'</span>)),</span><br><span class="line">    pageNumber = <span class="built_in">parseInt</span>(req.param(<span class="string">'pageNumber'</span>)),</span><br><span class="line">    userName = req.session.userName;</span><br><span class="line">  <span class="keyword">let</span> skip = (pageNumber<span class="number">-1</span>)*pageSize; <span class="comment">// 跳过几条</span></span><br><span class="line">  <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(name,<span class="string">'i'</span>); <span class="comment">// 在nodejs中，必须要使用RegExp，来构建正则表达式对象。</span></span><br><span class="line">  <span class="keyword">let</span> params = &#123;</span><br><span class="line">    name: reg</span><br><span class="line">  &#125;;</span><br><span class="line">  Teacher.findOne(&#123;<span class="string">'userName'</span>:userName&#125;).populate(&#123;<span class="attr">path</span>:<span class="string">'_papers'</span>,<span class="attr">match</span>:&#123;<span class="attr">name</span>: reg&#125;,<span class="attr">options</span>:&#123;<span class="attr">skip</span>:skip,<span class="attr">limit</span>:pageSize&#125;&#125;)</span><br><span class="line">    .exec(<span class="function">(<span class="params">err, doc</span>) =&gt;</span> &#123;</span><br><span class="line">      ....</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="populate"><a href="#populate" class="headerlink" title="populate"></a>populate</h5><p>mongodb本来就是非关系型的数据库，但是有很多时候不同的集合直接是需要关联的，这是就用到了mongoose提供的<code>populate</code></p><p>直接看图，不同集合直接的关联，用的就是<code>_id</code>,比如下图中，学生参加的考试，关联了试卷，试卷里面又关联了题目</p><p><img src="https://i.imgur.com/n4IthLV.png" alt=""></p><p>怎么查询呢：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.findOne(&#123;&#125;).populate(&#123;<span class="attr">path</span>:<span class="string">'exams._paper'</span>&#125;).exec(....)</span><br></pre></td></tr></table></figure><p>更多的可以看看我项目中的实际代码都在<code>server/controllers</code>下面</p><h5 id="关联集合的新增"><a href="#关联集合的新增" class="headerlink" title="关联集合的新增"></a>关联集合的新增</h5><p>在系统中，教师可以增加试卷，这个时候我就不知道该怎么保存前台传过来的数据。数据中既有试卷的信息，也有很多题目。题目都属于该试卷，改试卷又属于当前登录系统的老师（即创建试卷的老师）。<br>怎么才能让试卷、教师、问题关联起来啊，ref存的是_id,然而这些新增的数据，是保存之后才有_id的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">exports.savePaper = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> paperForm = req.body.paperForm;</span><br><span class="line">  <span class="keyword">let</span> userName = req.session.userName;</span><br><span class="line">  <span class="keyword">if</span>(paperForm == &#123;&#125;)&#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      status:<span class="string">'5'</span>,</span><br><span class="line">      msg: <span class="string">'数据不能为空'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 第一步查找当前登录的教师</span></span><br><span class="line">  Teacher.findOne(&#123;<span class="string">"userName"</span>: userName&#125;, (err,doc)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (doc) &#123;</span><br><span class="line">        <span class="keyword">let</span> paperData = &#123;</span><br><span class="line">          name:paperForm.name,</span><br><span class="line">          totalPoints:paperForm.totalPoints,</span><br><span class="line">          time:paperForm.time,</span><br><span class="line">          _teacher: doc._id, <span class="comment">// 这里就可以拿到教师的_id</span></span><br><span class="line">          _questions: [],</span><br><span class="line">          examnum:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第二步创建试卷</span></span><br><span class="line">        Paper.create(paperData,<span class="function"><span class="keyword">function</span> (<span class="params">err1,doc1</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (err1) &#123;</span><br><span class="line">            ...</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (doc1) &#123;</span><br><span class="line">              doc._papers.push(doc1._id); <span class="comment">// 教师中添加该试卷的_id</span></span><br><span class="line">              doc.save(); <span class="comment">// 很重要 不save则没有数据</span></span><br><span class="line">              </span><br><span class="line">              <span class="comment">// 第三步 创建问题</span></span><br><span class="line">              paperForm._questions.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                item._papers = [];</span><br><span class="line">                item._papers.push(doc1._id); <span class="comment">// 试卷中存入试卷的_id，因为此时已经创建了试卷，所以可以拿到_id</span></span><br><span class="line">                item._teacher = doc._id;  <span class="comment">// 试卷中存入教师的_id</span></span><br><span class="line">              &#125;)</span><br><span class="line">              Question.create(paperForm._questions,<span class="function"><span class="keyword">function</span> (<span class="params">err2,doc2</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err2) &#123;</span><br><span class="line">                  ...</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">if</span> (doc2) &#123;</span><br><span class="line">                    doc2.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                      doc1._questions.push(item._id); <span class="comment">// 当问题创建成功，则在试卷中存入问题的_id</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                    doc1.save();</span><br><span class="line">                    res.json(&#123;</span><br><span class="line">                      status:<span class="string">'0'</span>,</span><br><span class="line">                      msg: <span class="string">'success'</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ...</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              ...</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">       ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="关联集合的删除—删除试卷"><a href="#关联集合的删除—删除试卷" class="headerlink" title="关联集合的删除—删除试卷"></a>关联集合的删除—删除试卷</h5><blockquote><p>删除某一个试卷，既要删除教师中对应的试卷_id,也要删除问题中对应的试卷_id<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除试卷</span></span><br><span class="line">exports.deletePaper = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> id = req.body.id;</span><br><span class="line">  <span class="keyword">let</span> userName = req.session.userName;</span><br><span class="line">  <span class="comment">// 第一步 删除教师中的_id _papers是一个数组，所以用到了`$pull`</span></span><br><span class="line">  Teacher.update(&#123;<span class="string">"userName"</span>:userName&#125;,&#123;<span class="string">'$pull'</span>:&#123;<span class="string">'_papers'</span>:&#123;<span class="attr">$in</span>:id&#125;&#125;&#125;, (err,doc)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.json(&#123;</span><br><span class="line">        status:<span class="string">'1'</span>,</span><br><span class="line">        msg: err.message</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (doc) &#123;</span><br><span class="line">        <span class="comment">// 第二步  删除试卷 即 移除一个文档</span></span><br><span class="line">        Paper.remove(&#123;<span class="string">"_id"</span>:&#123;<span class="attr">$in</span>:id&#125;&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err1,doc1</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(err1) &#123;</span><br><span class="line">            res.json(&#123;</span><br><span class="line">              status:<span class="string">'1'</span>,</span><br><span class="line">              msg: err1.message</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (doc1) &#123;</span><br><span class="line">            <span class="comment">// 第三步  updateMany删除多个问题中的_id 这里并没有删除试卷中包含的问题，是为了以后题库做准备</span></span><br><span class="line">              Question.updateMany(&#123;<span class="string">'_papers'</span>:&#123;<span class="attr">$in</span>:id&#125;&#125;,&#123;<span class="string">'$pull'</span>:&#123;<span class="string">'_papers'</span>:&#123;<span class="attr">$in</span>:id&#125;&#125;&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err2,doc2</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(err2)&#123;</span><br><span class="line">                  ...</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">if</span> (doc2)&#123;</span><br><span class="line">                    ...</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              ...</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="关联集合多条数据的更新–修改试卷"><a href="#关联集合多条数据的更新–修改试卷" class="headerlink" title="关联集合多条数据的更新–修改试卷"></a>关联集合多条数据的更新–修改试卷</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改试卷-修改试卷</span></span><br><span class="line">exports.updatePaper = <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> userName = req.session.userName;</span><br><span class="line">  <span class="keyword">let</span> params = req.body.params;</span><br><span class="line">  <span class="keyword">let</span> paperParams = &#123; <span class="comment">// 试卷需要更新的字段</span></span><br><span class="line">    name: params.name,</span><br><span class="line">    totalPoints: params.totalPoints,</span><br><span class="line">    time: params.time</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> updateQuestion = []; <span class="comment">// 需要更新的题目</span></span><br><span class="line">  <span class="keyword">let</span> addQuestion = []; <span class="comment">// 需要新增的题目</span></span><br><span class="line">  params._questions.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(item._id) &#123;  <span class="comment">// 通过判断是否有_id区分已有的或者是新增的</span></span><br><span class="line">      updateQuestion.push(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      addQuestion.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  Teacher.findOne(&#123;<span class="string">'userName'</span>:userName&#125;,(err,doc)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (doc) &#123;</span><br><span class="line">        Paper.findOneAndUpdate(&#123;<span class="string">"_id"</span>:params._id&#125;,paperParams,(err1,doc1) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span>(err1) &#123;</span><br><span class="line">            ...</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(doc1)&#123;</span><br><span class="line">              updateQuestion.forEach(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123; <span class="comment">// 循环更新题目，好像很傻的方法，可能有更好的办法</span></span><br><span class="line">                Question.update(&#123;<span class="string">"_id"</span>:item._id&#125;,item,(err2,doc2)=&gt;&#123;</span><br><span class="line">                  <span class="keyword">if</span>(err2)&#123;</span><br><span class="line">                    res.json(&#123;</span><br><span class="line">                      status:<span class="string">'1'</span>,</span><br><span class="line">                      msg: err2.message</span><br><span class="line">                    &#125;)</span><br><span class="line">                  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(doc2)&#123;</span><br><span class="line">                      <span class="keyword">if</span>(index == (updateQuestion.length<span class="number">-1</span>))&#123;</span><br><span class="line">                        <span class="keyword">if</span> (addQuestion.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                          addQuestion.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                            item._papers = [];</span><br><span class="line">                            item._papers.push(doc1._id);</span><br><span class="line">                            item._teacher = doc._id;</span><br><span class="line">                          &#125;)</span><br><span class="line">                          <span class="comment">// 创建新增题目</span></span><br><span class="line">                          Question.create(addQuestion,(err3,doc3) =&gt; &#123;</span><br><span class="line">                            <span class="keyword">if</span>(err3) &#123;</span><br><span class="line">                             ...</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                              <span class="keyword">if</span>(doc3) &#123;</span><br><span class="line">                                doc3.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                                  doc1._questions.push(item._id); <span class="comment">// 还要将新增的题目关联到试卷当中</span></span><br><span class="line">                                &#125;)</span><br><span class="line"></span><br><span class="line">                                doc1.save(); <span class="comment">// 很重要 不save则没有数据</span></span><br><span class="line">                                res.json(&#123;</span><br><span class="line">                                  status:<span class="string">'0'</span>,</span><br><span class="line">                                  msg: <span class="string">'success'</span></span><br><span class="line">                                &#125;)</span><br><span class="line">             <span class="comment">// .......................判断太长省略........................</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="更新子文档数组–阅卷打分"><a href="#更新子文档数组–阅卷打分" class="headerlink" title="更新子文档数组–阅卷打分"></a>更新子文档数组–阅卷打分</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打分提交</span></span><br><span class="line">exports.submitScore = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name = req.param(<span class="string">'userName'</span>),</span><br><span class="line">    date = req.param(<span class="string">'date'</span>),</span><br><span class="line">    score = req.param(<span class="string">'score'</span>) - <span class="number">0</span>,</span><br><span class="line">    userName = req.session.userName;</span><br><span class="line">  Teacher.findOne(&#123;<span class="string">'userName'</span>:userName&#125;,(err,doc) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(doc) &#123;</span><br><span class="line">        Student.update(&#123;<span class="string">"userName"</span>:name,<span class="string">"exams.date"</span>:date&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="string">"exams.$.score"</span>:score,<span class="string">"exams.$.isSure"</span>:<span class="literal">true</span>&#125;&#125;,(err1, doc1) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span>(err1) &#123;</span><br><span class="line">            ...</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(doc1) &#123;</span><br><span class="line">              ...</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              ...</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="md5加密"><a href="#md5加密" class="headerlink" title="md5加密"></a>md5加密</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//student.js</span></span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mdHash = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// hash 的定义要写在这个方法内，不然会报错Digest already called ****</span></span><br><span class="line">  <span class="keyword">const</span> hash = crypto.createHash(<span class="string">'md5'</span>);</span><br><span class="line">  <span class="keyword">return</span> hash.update(data).digest(<span class="string">'hex'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="comment">//注册</span></span><br><span class="line">exports.register = <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> userInfo = req.body.userInfo;</span><br><span class="line">  <span class="comment">//获取到前台传过来的密码，先加密再存储</span></span><br><span class="line">  userInfo.passWord = mdHash(userInfo.passWord);</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      这是我毕业项目，从0到1，前后台独立开发完成。功能不多，在此记录,温故而知新！
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="express" scheme="http://yoursite.com/tags/express/"/>
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
      <category term="elementUI" scheme="http://yoursite.com/tags/elementUI/"/>
    
  </entry>
  
  <entry>
    <title>win10下安装配置mongodb</title>
    <link href="http://yoursite.com/2018/05/05/win-mongodb/"/>
    <id>http://yoursite.com/2018/05/05/win-mongodb/</id>
    <published>2018-05-05T06:59:28.000Z</published>
    <updated>2018-05-05T07:01:56.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载Mongodb"><a href="#下载Mongodb" class="headerlink" title="下载Mongodb"></a>下载Mongodb</h2><p><a href="http://dl.mongodb.org/dl/win32/x86_64" target="_blank" rel="noopener">各个版本下载地址</a><br><img src="https://i.imgur.com/Oh0ZwCV.png" alt=""></p><h2 id="安装Mongodb"><a href="#安装Mongodb" class="headerlink" title="安装Mongodb"></a>安装Mongodb</h2><p>一路下一步就行了<br><img src="https://i.imgur.com/evefSbo.png" alt=""></p><h3 id="配置Mongodb"><a href="#配置Mongodb" class="headerlink" title="配置Mongodb"></a>配置Mongodb</h3><ol><li><p>在c:\MongoDB（可随意起）下面建一个data文件夹 c:\MongoDB\data</p></li><li><p>在c:\MongoDB（可随意起）下面建一个logs文件夹 c:\MongoDB\logs ，在里面建一个文件mongo.log</p></li><li><p>在c:\MongoDB（可随意起）下面建一个etc(随意起，放配置文件)文件夹 c:\MongoDB\etc ,在里面建一个文件mongo.conf</p></li></ol><p>打开mongo.conf文件，修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#数据库路径</span><br><span class="line">dbpath=c:\MongoDB\data\</span><br><span class="line">#日志输出文件路径</span><br><span class="line">logpath=c:\MongoDB\logs\mongodb.log</span><br><span class="line">#错误日志采用追加模式，配置这个选项后mongodb的日志会追加到现有的日志文件，而不是从新创建一个新文件</span><br><span class="line">logappend=true</span><br><span class="line">#启用日志文件，默认启用</span><br><span class="line">journal=true</span><br><span class="line">#这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</span><br><span class="line">quiet=false</span><br><span class="line">#端口号 默认为27017</span><br><span class="line">port=27017</span><br></pre></td></tr></table></figure></p><h3 id="运行mongodb"><a href="#运行mongodb" class="headerlink" title="运行mongodb"></a>运行mongodb</h3><p><img src="https://i.imgur.com/sRNRLpT.png" alt=""></p><h3 id="配置mongodb服务"><a href="#配置mongodb服务" class="headerlink" title="配置mongodb服务"></a>配置mongodb服务</h3><p><code>mongod --config c:\MongoDB\etc\mongo.conf --install --serviceName &quot;MongoDB&quot;</code></p><p><img src="https://i.imgur.com/kFFf50n.png" alt=""></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p><img src="https://i.imgur.com/JlL9IiO.png" alt=""></p><h2 id="下载安装Robo-3T"><a href="#下载安装Robo-3T" class="headerlink" title="下载安装Robo 3T"></a>下载安装Robo 3T</h2><p>下载一个图形化界面工具<br><img src="https://i.imgur.com/EST4sUn.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      win10下安装配置mongodb
    
    </summary>
    
      <category term="mongodb" scheme="http://yoursite.com/categories/mongodb/"/>
    
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>深入理解浮动</title>
    <link href="http://yoursite.com/2018/05/05/float/"/>
    <id>http://yoursite.com/2018/05/05/float/</id>
    <published>2018-05-05T03:13:47.000Z</published>
    <updated>2018-05-05T03:16:17.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常规流"><a href="#常规流" class="headerlink" title="常规流"></a>常规流</h2><ul><li>常规流（文档流）与包含块<blockquote><p>常规流就是页面元素（dom节点）从上往下，从左往右的排列</p></blockquote></li></ul><blockquote><p>包含块：一个元素的包含块是离它最近的<strong>块级祖先</strong></p></blockquote><ul><li>脱离常规流<blockquote><p>定位<code>position:absolute/fixed</code>,脱离常规流的元素，其前后的元素会当它不存在</p></blockquote></li></ul><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><blockquote><p>《CSS权威指南》中说，浮动元素同时处于（常规）流内和流外</p></blockquote><ul><li>浮动元素不会影响块级元素的布局（块级元素会当它不存在）–流外</li><li>浮动元素会影响行内元素的布局 – 流内<ul><li>间接影响块级元素布局</li></ul></li></ul><p>元素浮动之后会变成一个块框，相当于一个div</p><blockquote><p>浮动和定位一起用，浮动会失效 （浮动和相对定位可以一起用，先浮动，再相对于浮动之后的位置进行定位）</p></blockquote><h3 id="浮动元素的摆放方式"><a href="#浮动元素的摆放方式" class="headerlink" title="浮动元素的摆放方式"></a>浮动元素的摆放方式</h3><ul><li>尽量靠上</li><li>尽量靠左</li><li>尽量挨着，margin外边缘挨着</li><li>不能超出包含块（除非元素本身已经比包含块更宽）</li><li>不能超出所在行的最高点</li><li>不能超过它前面的的浮动元素的最高点</li><li>行内元素绕着浮动元素摆放<ul><li>行内元素会出现在左浮动元素的右边及右浮动元素的左边</li><li>左浮动元素的左边及右浮动元素的右边是不会摆放行内元素的</li></ul></li></ul><h3 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h3><p><img src="https://i.imgur.com/XBozugz.png" alt=""><br><img src="https://i.imgur.com/HsgBADf.png" alt=""><br>下图中最长的浮动块，长度太长，所以它没法挨着第二个浮动元素的左边<br><img src="https://i.imgur.com/XSes8Xn.png" alt=""><br>下图中虽然第二个后面可以放下第四个，但是它并不能浮动到那里，它也不能浮动到第一个的下面<br><img src="https://i.imgur.com/U4rQkf7.png" alt=""></p><p><img src="https://i.imgur.com/WAnun0V.png" alt=""></p><p>行内元素会出现在左浮动元素的右边及右浮动元素的左边，div3的左边是没有文字的<br><img src="https://i.imgur.com/O4ceub3.png" alt=""><br>不能超出所在行的最高点（图中的span虽然浮动了，它还是在它所在行，不会超出）<br><img src="https://i.imgur.com/fgNLBX6.png" alt=""><br>浮动元素不会影响块级元素的布局（块级元素会当它不存在）–流外<br><img src="https://i.imgur.com/Cr3YAal.png" alt=""></p><h3 id="浮动清除（clear-常规流中的块级元素）"><a href="#浮动清除（clear-常规流中的块级元素）" class="headerlink" title="浮动清除（clear,常规流中的块级元素）"></a>浮动清除（clear,常规流中的块级元素）</h3><blockquote><p><code>clear: none | left | right | both;</code></p></blockquote><blockquote><p>浮动清除是指块框下移，直到某一边（或两边）没有浮动元素为止</p></blockquote><p><img src="https://i.imgur.com/LGLDtS2.png" alt=""><br>清除浮动</p><p>清除左浮动，会按图中箭头的方向从右往左看，将div2向下移动，直到div2的左边没有左浮动元素（清除右浮动与之相对）<br><img src="https://i.imgur.com/hh6tHkQ.png" alt=""></p><h3 id="闭合浮动"><a href="#闭合浮动" class="headerlink" title="闭合浮动"></a>闭合浮动</h3><p><img src="https://i.imgur.com/0EtOxUI.png" alt=""></p><p>给父级div加一个<code>overflow:hidden</code><br><img src="https://i.imgur.com/PxERVsQ.png" alt=""></p><ul><li>可以添加一个行内元素，让它的宽度为100%，它就会往下移，这样就撑开了父级div</li><li>父级div添加<code>overflow:hidden</code></li><li>伪元素 clear（clearfix）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>:<span class="string">"."</span>;</span><br><span class="line"><span class="attribute">display</span>:block;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">clear</span>:both;</span><br><span class="line"><span class="attribute">visibility</span>:hidden</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      css浮动到底是怎么回事
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>react-native之navigation</title>
    <link href="http://yoursite.com/2018/04/04/react-native/"/>
    <id>http://yoursite.com/2018/04/04/react-native/</id>
    <published>2018-04-04T09:03:27.000Z</published>
    <updated>2018-05-10T08:49:57.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先看项目目录"><a href="#先看项目目录" class="headerlink" title="先看项目目录"></a>先看项目目录</h2><p>这个文件目录除了<code>src</code> 其他的都是通过<code>react-native init my_app</code>自动生成的。</p><blockquote><p>自所以要贴目录，是我发现我在网上查找博客文章的时候，很多都没有目录，上来就是代码，一脸懵逼进来一脸懵逼出去，可能是自己太菜了。</p></blockquote><p><img src="https://i.imgur.com/mRe9XyT.png" alt=""></p><h2 id="react-navigation"><a href="#react-navigation" class="headerlink" title="react-navigation"></a>react-navigation</h2><blockquote><p>译注：从0.44版本开始，Navigator被从react native的核心组件库中剥离到了一个名为react-native-deprecated-custom-components的单独模块中。如果你需要继续使用Navigator，则需要先npm i facebookarchive/react-native-custom-components安装，然后从这个模块中import，即import { Navigator } from ‘react-native-deprecated-custom-components’.——官网</p></blockquote><h3 id="安装react-navigation"><a href="#安装react-navigation" class="headerlink" title="安装react-navigation"></a>安装react-navigation</h3><p><code>npm i react-navigation --save</code></p><p><code>yarn add react-navigation</code></p><p>这个库包含了三个组件：</p><ul><li>StackNavigator：用来跳转页面和传递参数</li><li>TabNavigator：类似底部导航栏，用来在同一屏幕下切换不同界面</li><li>DrawerNavigator：侧滑菜单导航栏，用于轻松设置带抽屉导航的屏幕</li></ul><blockquote><p>该文只说前两个怎么用，就是入门，至于有很多配置项的东西，可以查官方文档。这也是我的学习方式，先用了再说，先了解一下这个到底是长什么样的，至于它化不化妆慢慢再看。<br><code>DrawerNavigator</code>希望日后能补上。</p></blockquote><h3 id="StackNavigator"><a href="#StackNavigator" class="headerlink" title="StackNavigator"></a>StackNavigator</h3><p>先安照第一张文件目录图建几个文件，文件名随便。</p><ul><li>index.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  Button,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Image</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  StackNavigator,</span><br><span class="line">  TabNavigator</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> First <span class="keyword">from</span> <span class="string">'./first.js'</span>;</span><br><span class="line"><span class="keyword">import</span> Second <span class="keyword">from</span> <span class="string">'./second.js'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Navigation</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line"><span class="keyword">super</span>(props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    headerTitle: <span class="string">'Navigation'</span>,</span><br><span class="line">    <span class="comment">// header: null, // 隐藏顶部导航</span></span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;navigate&#125; = <span class="keyword">this</span>.props.navigation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View&gt;</span><br><span class="line">        &lt;Text&gt;This is the home screen <span class="keyword">of</span> the app&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Button</span></span><br><span class="line"><span class="regexp">          onPress=&#123;() =&gt; navigate('First',&#123;user:'参数111'&#125;)&#125;</span></span><br><span class="line"><span class="regexp">          title="点击我跳转"</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">     )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">const MyScreens = StackNavigator(&#123;</span></span><br><span class="line"><span class="regexp">  Home: &#123; screen: Navigation &#125;,</span></span><br><span class="line"><span class="regexp">  First: &#123;screen: First&#125;,</span></span><br><span class="line"><span class="regexp">  Second: &#123;screen: Second&#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const styles = StyleSheet.create(&#123;</span></span><br><span class="line"><span class="regexp">    container:&#123;</span></span><br><span class="line"><span class="regexp">        flex: 1,</span></span><br><span class="line"><span class="regexp">        backgroundColor:'#fff'</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    icon: &#123;</span></span><br><span class="line"><span class="regexp">        height: 22,</span></span><br><span class="line"><span class="regexp">        width: 22,</span></span><br><span class="line"><span class="regexp">        resizeMode: 'contain'</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp">export default MyScreens;</span></span><br></pre></td></tr></table></figure><ul><li>first.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  Button</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">First</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> navigationOptions = <span class="function">(<span class="params">&#123; navigation &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line"> title: <span class="string">`<span class="subst">$&#123;navigation.state.params.user&#125;</span>`</span>,</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    headerTitle: <span class="string">'第一页'</span>,</span><br><span class="line">    <span class="comment">// header: null, // 隐藏顶部导航</span></span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;navigate&#125; = <span class="keyword">this</span>.props.navigation;</span><br><span class="line">  <span class="keyword">const</span> &#123;params&#125; = <span class="keyword">this</span>.props.navigation.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">     &lt;View&gt;</span><br><span class="line">     &lt;Text&gt;我是first页面&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">     &lt;Text&gt;上一个页面传的参数&#123;params.user&#125;&lt;/</span>Text&gt;</span><br><span class="line">     &lt;Button</span><br><span class="line">          onPress=&#123;() =&gt; navigate(<span class="string">'Second'</span>,&#123;<span class="attr">papa</span>:<span class="string">'参数222'</span>&#125;)&#125;</span><br><span class="line">          title=<span class="string">"点击我跳转"</span></span><br><span class="line">        /&gt;</span><br><span class="line">     &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>second.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  Button</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">First</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> navigationOptions = <span class="function">(<span class="params">&#123; navigation &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line"> title: <span class="string">`<span class="subst">$&#123;navigation.state.params.papa&#125;</span>`</span>,</span><br><span class="line">&#125;);</span><br><span class="line"> <span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    headerTitle: <span class="string">'第二页'</span>,</span><br><span class="line">    <span class="comment">// header: null, // 隐藏顶部导航</span></span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;goBack&#125; = <span class="keyword">this</span>.props.navigation;</span><br><span class="line">  <span class="keyword">const</span> &#123;params&#125; = <span class="keyword">this</span>.props.navigation.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">     &lt;View&gt;</span><br><span class="line">     &lt;Text&gt;我是second页面&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">     &lt;Text&gt;上一个页面传的参数&#123;params.papa&#125;&lt;/</span>Text&gt;</span><br><span class="line">     &lt;Button</span><br><span class="line">          onPress=&#123;() =&gt; goBack()&#125;</span><br><span class="line">          title=<span class="string">"点击我回跳"</span></span><br><span class="line">        /&gt;</span><br><span class="line">     &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://i.imgur.com/R35h4Ke.gif" alt=""></p><p>这就实现了页面之间的跳转，和传参。</p><p><code>onPress={() =&gt; navigate(&#39;First&#39;,{user:&#39;参数111&#39;})}</code>,第一个参数表示跳转的页面，第二参数是传递的参数。跳转页面必须是已经注册的页面。</p><h3 id="TabNavigator"><a href="#TabNavigator" class="headerlink" title="TabNavigator"></a>TabNavigator</h3><ul><li>index.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  Button,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Image</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  StackNavigator,</span><br><span class="line">  TabNavigator</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> First <span class="keyword">from</span> <span class="string">'./first.js'</span>;</span><br><span class="line"><span class="keyword">import</span> Second <span class="keyword">from</span> <span class="string">'./second.js'</span>;</span><br><span class="line"><span class="keyword">import</span> Other <span class="keyword">from</span> <span class="string">'./other.js'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Navigation</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line"><span class="keyword">super</span>(props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    headerTitle: <span class="string">'Navigation'</span>,</span><br><span class="line">    <span class="comment">// header: null, // 隐藏顶部导航</span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;navigate&#125; = <span class="keyword">this</span>.props.navigation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View&gt;</span><br><span class="line">        &lt;Text&gt;This is the home screen <span class="keyword">of</span> the app&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Button</span></span><br><span class="line"><span class="regexp">          onPress=&#123;() =&gt; navigate('First',&#123;user:'参数111'&#125;)&#125;</span></span><br><span class="line"><span class="regexp">          title="点击我跳转"</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">          onPress=&#123;() =&gt; navigate(<span class="string">'Other'</span>)&#125;</span><br><span class="line">          title=<span class="string">"点击我跳转到其他页面"</span></span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">     )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">const MainScreenNavigator = TabNavigator(&#123;</span></span><br><span class="line"><span class="regexp">    Home: &#123;</span></span><br><span class="line"><span class="regexp">        screen: Navigation,</span></span><br><span class="line"><span class="regexp">        navigationOptions: &#123;</span></span><br><span class="line"><span class="regexp">          tabBarLabel: '首页',</span></span><br><span class="line"><span class="regexp">          tabBarIcon: (&#123;tintColor&#125;) =&gt; (</span></span><br><span class="line"><span class="regexp">              &lt;Image</span></span><br><span class="line"><span class="regexp">                  source=&#123;require('./</span>home.png<span class="string">')&#125;</span></span><br><span class="line"><span class="string">                  style=&#123;[&#123;tintColor: tintColor&#125;,styles.icon]&#125;</span></span><br><span class="line"><span class="string">              /&gt;</span></span><br><span class="line"><span class="string">          ),</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    First: &#123;</span></span><br><span class="line"><span class="string">        screen: First,</span></span><br><span class="line"><span class="string">        navigationOptions: &#123;</span></span><br><span class="line"><span class="string">          tabBarLabel: '</span>第一页<span class="string">',</span></span><br><span class="line"><span class="string">          tabBarIcon: (&#123;tintColor&#125;) =&gt; (</span></span><br><span class="line"><span class="string">              &lt;Image</span></span><br><span class="line"><span class="string">                  source=&#123;require('</span>./home.png<span class="string">')&#125;</span></span><br><span class="line"><span class="string">                  style=&#123;[&#123;tintColor: tintColor&#125;,styles.icon]&#125;</span></span><br><span class="line"><span class="string">              /&gt;</span></span><br><span class="line"><span class="string">          ),</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    Second: &#123;</span></span><br><span class="line"><span class="string">        screen: Second,</span></span><br><span class="line"><span class="string">        navigationOptions: &#123;</span></span><br><span class="line"><span class="string">          tabBarLabel: '</span>第二页<span class="string">',</span></span><br><span class="line"><span class="string">          tabBarIcon: (&#123;tintColor&#125;) =&gt; (</span></span><br><span class="line"><span class="string">              &lt;Image</span></span><br><span class="line"><span class="string">                  source=&#123;require('</span>./home.png<span class="string">')&#125;</span></span><br><span class="line"><span class="string">                  style=&#123;[&#123;tintColor: tintColor&#125;,styles.icon]&#125;</span></span><br><span class="line"><span class="string">              /&gt;</span></span><br><span class="line"><span class="string">          ),</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">&#125;, &#123;</span></span><br><span class="line"><span class="string">    animationEnabled: false, // 切换页面时不显示动画</span></span><br><span class="line"><span class="string">    tabBarPosition: '</span>bottom<span class="string">', // 显示在底端，android 默认是显示在页面顶端的</span></span><br><span class="line"><span class="string">    swipeEnabled: false, // 禁止左右滑动</span></span><br><span class="line"><span class="string">    // backBehavior: '</span>none<span class="string">', // 按 back 键是否跳转到第一个 Tab， none 为不跳转</span></span><br><span class="line"><span class="string">    tabBarOptions: &#123;</span></span><br><span class="line">        activeTintColor: '#008AC9', // 文字和图片选中颜色</span><br><span class="line">        inactiveTintColor: <span class="string">'#999'</span>, <span class="comment">// 文字和图片默认颜色</span></span><br><span class="line">        showIcon: <span class="literal">true</span>, <span class="comment">// android 默认不显示 icon, 需要设置为 true 才会显示</span></span><br><span class="line">        indicatorStyle: &#123;<span class="attr">height</span>: <span class="number">0</span>&#125;, <span class="comment">// android 中TabBar下面会显示一条线，高度设为 0 后就不显示线了</span></span><br><span class="line">        style: &#123;</span><br><span class="line">            backgroundColor: <span class="string">'#000'</span>, <span class="comment">// TabBar 背景色</span></span><br><span class="line">        &#125;,</span><br><span class="line">        labelStyle: &#123;</span><br><span class="line">            fontSize: <span class="number">12</span>, <span class="comment">// 文字大小</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> MyScreens = StackNavigator(&#123;</span><br><span class="line">  Home: &#123; <span class="attr">screen</span>: MainScreenNavigator &#125;,</span><br><span class="line">  <span class="comment">// First: &#123;screen: First&#125;,</span></span><br><span class="line">  <span class="comment">// Second: &#123;screen: Second&#125;</span></span><br><span class="line">  Other: &#123;<span class="attr">screen</span>: Other&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">    container:&#123;</span><br><span class="line">        flex: <span class="number">1</span>,</span><br><span class="line">        backgroundColor:<span class="string">'#fff'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    icon: &#123;</span><br><span class="line">        height: <span class="number">22</span>,</span><br><span class="line">        width: <span class="number">22</span>,</span><br><span class="line">        resizeMode: <span class="string">'contain'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyScreens; <span class="comment">// 这里导出的是MyScreens,而不是Navigation组件</span></span><br></pre></td></tr></table></figure><ul><li>first.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  Button</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">First</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="comment">// static navigationOptions = (&#123; navigation &#125;) =&gt; (&#123;</span></span><br><span class="line"> <span class="comment">//    title: `$&#123;navigation.state.params.user&#125;`,</span></span><br><span class="line"> <span class="comment">//  &#125;);</span></span><br><span class="line"> <span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    headerTitle: <span class="string">'第一页'</span>,</span><br><span class="line">    <span class="comment">// header: null, // 隐藏顶部导航</span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;navigate&#125; = <span class="keyword">this</span>.props.navigation;</span><br><span class="line">  <span class="comment">// const &#123;params&#125; = this.props.navigation.state;</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">     &lt;View&gt;</span><br><span class="line">     &lt;Text&gt;我是first页面&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">     &#123;/</span>*<span class="xml"><span class="tag">&lt;<span class="name">Text</span>&gt;</span>上一个页面传的参数&#123;params.user&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span>*<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">     &lt;Button</span></span><br><span class="line"><span class="regexp">          onPress=&#123;() =&gt; navigate('Second',&#123;papa:'参数222'&#125;)&#125;</span></span><br><span class="line"><span class="regexp">          title="点击我跳转"</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">     &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>second.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  Button</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">First</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="comment">// static navigationOptions = (&#123; navigation &#125;) =&gt; (&#123;</span></span><br><span class="line"> <span class="comment">//    title: `$&#123;navigation.state.params.papa&#125;`,</span></span><br><span class="line"> <span class="comment">//  &#125;);</span></span><br><span class="line"> <span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    headerTitle: <span class="string">'第二页'</span>,</span><br><span class="line">    <span class="comment">// header: null, // 隐藏顶部导航</span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;goBack&#125; = <span class="keyword">this</span>.props.navigation;</span><br><span class="line">  <span class="comment">// const &#123;params&#125; = this.props.navigation.state;</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">     &lt;View&gt;</span><br><span class="line">     &lt;Text&gt;我是second页面&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">     &#123;/</span>*<span class="xml"><span class="tag">&lt;<span class="name">Text</span>&gt;</span>上一个页面传的参数&#123;params.papa&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span>*<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">     &lt;Button</span></span><br><span class="line"><span class="regexp">          onPress=&#123;() =&gt; goBack()&#125;</span></span><br><span class="line"><span class="regexp">          title="点击我回跳"</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">     &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://i.imgur.com/YqJc1Ya.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      react-native之navigation
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="reactNative" scheme="http://yoursite.com/tags/reactNative/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript——Promise</title>
    <link href="http://yoursite.com/2018/03/08/promise/"/>
    <id>http://yoursite.com/2018/03/08/promise/</id>
    <published>2018-03-08T06:08:24.000Z</published>
    <updated>2018-05-10T08:49:45.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Promise"><a href="#什么是Promise" class="headerlink" title="什么是Promise"></a>什么是Promise</h2><blockquote><p>The Promise object is used for asynchronous computations.<br>Promise对象用于异步计算.<br>A Promise represents a value which may be available now,or in the future,or never.<br>一个Promise表示一个现在、将来或永不可能用的值.</p></blockquote><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了<code>Promise</code>对象。</p><h3 id="new一个promise"><a href="#new一个promise" class="headerlink" title="new一个promise"></a>new一个promise</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 一段耗时很长的异步操作</span></span><br><span class="line">.....</span><br><span class="line">  resolve(); <span class="comment">// 数据处理完成</span></span><br><span class="line">  reject(); <span class="comment">// 数据处理出错</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 成功，下一步</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 失败，做相应处理</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>Promise</code>构造函数可以接受两个参数，<code>resolve</code>和<code>reject</code>。这两个函数是，JavaScript引擎自带的，不用自己定义他们。</p><p><code>Promise</code> 有三个状态:</p><ol><li><code>pending</code> [待定] 初始状态</li><li><code>fulfilled</code> [实现]操作成功</li><li><code>rejected</code> [被否决]操作失败</li></ol><p><code>resolve</code>的作用就是将<code>pending</code>状态 ===&gt; <code>fulfilled</code>，<code>reject</code>的作用是讲<code>pending</code>状态 ===&gt; <code>rejected</code></p><blockquote><p><code>Promise</code>状态发送改变，就会触发<code>.then()</code>里面的响应函数处理后续步骤。<br><code>Promise</code>状态一经改变，就不会再变了。</p></blockquote><h2 id="第一个实例"><a href="#第一个实例" class="headerlink" title="第一个实例"></a>第一个实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    resolve(<span class="string">'hello'</span>);</span><br><span class="line">  &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value + <span class="string">'world'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/HOJQmbs.png" alt=""><br><img src="https://i.imgur.com/V4rR3Fs.png" alt=""></p><p>先输出1，间隔两秒输出了helloworld。</p><blockquote><p><code>.then()</code>中的<code>value</code>正是<code>resolve()</code>中的参数。</p></blockquote><h2 id="在-then-中返回一个Promise"><a href="#在-then-中返回一个Promise" class="headerlink" title="在.then()中返回一个Promise"></a>在<code>.then()</code>中返回一个Promise</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">'2'</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">'3'</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>间隔两秒，依次输出1 2 3<br><img src="https://i.imgur.com/hfUIOdS.png" alt=""></p><h2 id="假如一个Promise-已经完成了，再-then-会怎样？？"><a href="#假如一个Promise-已经完成了，再-then-会怎样？？" class="headerlink" title="假如一个Promise 已经完成了，再.then()会怎样？？"></a>假如一个Promise 已经完成了，再.then()会怎样？？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'go'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'the promise fulfilled'</span>);</span><br><span class="line">    resolve(<span class="string">'hahahahha'</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/QqQAba9.png" alt=""></p><blockquote><p>我们在任何一个地方，生成了一个<code>Promise</code>队列之后，我们可以声明一个变量，将它传递到其他地方，如果我们的操作是很明显的一个队列的状态(先进先出)，就可以在它后面追加任意多的<code>.then()</code>，不管他前面<code>Promise</code>状态是完成了还是没完成，队列都会安装固定的顺序去执行如果已完成，后面追加的<code>.then()</code>也会得到前面<code>Promise</code>返回的值。</p></blockquote><h2 id="假如在-then-的函数里面不返回新的Promise，会怎样？？"><a href="#假如在-then-的函数里面不返回新的Promise，会怎样？？" class="headerlink" title="假如在.then()的函数里面不返回新的Promise，会怎样？？"></a>假如在.then()的函数里面不返回新的Promise，会怎样？？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">'hello'</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'everyone'</span>);</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 立即执行函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">        resolve(<span class="string">'hahah'</span>);</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)();</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value + <span class="string">'111111111'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/T7IP4ZL.png" alt=""></p><blockquote><p><code>.then()</code>接受两个函数作为参数，分别代表<code>fulfilled</code>和<code>rejected</code>. <code>.then()</code>返回一个新的<code>Promise</code>实例，所以它可以链式调用状态响应函数可以返回新的<code>Promise</code>，或其他值如果返回新的<code>Promise</code>，那么下一级<code>.then()</code>会在新<code>Promise</code>状态改变之后执行,如果返回其他任何值，则会立刻执行下一级<code>.then()</code></p></blockquote><h2 id="then-里面有-then-的情况"><a href="#then-里面有-then-的情况" class="headerlink" title=".then()里面有.then()的情况"></a>.then()里面有.then()的情况</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Step 1'</span>);</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">100</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Step 1-1'</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">110</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Step 1-2'</span>);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Step 1-3'</span>);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// 110</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Step 2'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/kAwb2RI.png" alt=""></p><blockquote><p>因为<code>.then()</code>返回的还是<code>Promise</code>实例，所以会等到里面的<code>.then()</code>执行完，再执行外面的。</p></blockquote><h2 id="四种情形"><a href="#四种情形" class="headerlink" title="四种情形"></a>四种情形</h2><h3 id="第一种-返回一个promise实例"><a href="#第一种-返回一个promise实例" class="headerlink" title="第一种 返回一个promise实例"></a>第一种 返回一个promise实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doSomething().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> doSomethingElse();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>假定doSomethingElse返回一个promise实例;图中横向代表执行先后顺序</p></blockquote><p><img src="https://i.imgur.com/umARD97.png" alt=""></p><h3 id="第二种-没有返回"><a href="#第二种-没有返回" class="headerlink" title="第二种 没有返回"></a>第二种 没有返回</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doSomething().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  doSomethingElse();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/y5UQu8O.png" alt=""></p><blockquote><p>第一个<code>.then()</code>没有return，虽然<code>doSomethingElse()</code>返回了一个<code>Promise</code>实例，但是这个<code>Promise</code>实例并没有返回给第一个<code>.then()</code>的响应函数，所以只能看作<code>doSomethingElse()</code>返回了一个<code>undefined</code>。</p></blockquote><h3 id="第三种-直接传入了一个promise实例"><a href="#第三种-直接传入了一个promise实例" class="headerlink" title="第三种 直接传入了一个promise实例"></a>第三种 直接传入了一个promise实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doSomething().then(doSomethingElse());</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/IiO1XAP.png" alt=""></p><blockquote><p>在第一个<code>.then()</code>传入了<code>doSomethingElse()</code>，也就是传入了一个<code>Promise</code>实例<br>在这种情况下，<code>doSomething</code>与<code>doSomethingElse</code>的执行时间是几乎一致的，因为<code>doSomethingElse</code>返回的是一个<code>Promise</code>实例，而不是一个函数，在<code>Promise</code>规范的定义当中，这个<code>.then()</code>会被忽略掉，所以它的完成时间是无关紧要的.</p></blockquote><h3 id="第四种-传入一个函数"><a href="#第四种-传入一个函数" class="headerlink" title="第四种 传入一个函数"></a>第四种 传入一个函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doSomething().then(doSomethingElse);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/FO98BHf.png" alt=""></p><blockquote><p><code>.then()</code>接受两个参数，所以<code>doSomethingElse</code>则作为第一个<code>resolve</code>参数,并且<code>doSomethingElse</code>返回一个<code>Promise</code>实例</p></blockquote><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="catch捕获异常"><a href="#catch捕获异常" class="headerlink" title="catch捕获异常"></a><code>catch</code>捕获异常</h3><blockquote><p><code>Promise</code>会自动捕获内部异常，并交给<code>rejected</code>响应函数处理。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'err'</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'success'</span> + value);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'error'</span> + value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><code>catch</code>也是返回一个Promise实例</p></blockquote><p><img src="https://i.imgur.com/CsMkg1n.png" alt=""></p><h3 id="reject返回异常"><a href="#reject返回异常" class="headerlink" title="reject返回异常"></a><code>reject</code>返回异常</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    reject(<span class="string">'bye'</span>);</span><br><span class="line">  &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'success:'</span> + value);</span><br><span class="line">&#125;, value =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Err:'</span>+ value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/3ytRP6q.png" alt=""></p><h2 id="Promise进阶"><a href="#Promise进阶" class="headerlink" title="Promise进阶"></a>Promise进阶</h2><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h3><blockquote><p>Promise.all([p1,p2,p3,……])用于将多个Promise实例，包装成一个新的Promise实例。返回一个普通的Promise实例。</p></blockquote><ul><li>它接受一个数组作为参数。</li><li>数组里可以是Promise对象，也可以是别的值，只有Promise会等待状态的改变。</li><li>当所有子Promise都完成，该Promise完成，返回值是全部返回值组成的数组。</li><li>有任何一个失败，该Promise失败，返回值是第一个失败的子Promise的结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).then(<span class="function"><span class="params">all</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1:'</span>, all);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all([<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'oxxx'</span>);</span><br><span class="line">  &#125;, <span class="string">'xx00'</span>,<span class="literal">false</span>]);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">all</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'2:'</span>, all);</span><br><span class="line">  <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">'I\'m P1'</span>);</span><br><span class="line">    &#125;, <span class="number">1500</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">'I\'m P2'</span>);</span><br><span class="line">    &#125;, <span class="number">1300</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all([p1, p2]);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">all</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'3:'</span>, all);</span><br><span class="line">  <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">'I\'m P1'</span>);</span><br><span class="line">    &#125;, <span class="number">1500</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      reject(<span class="string">'I\'m P2'</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      reject(<span class="string">'I\'m P3'</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">all</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'all'</span>, all);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Catch: '</span> + err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/4gEt1oQ.png" alt=""></p><h3 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h3><blockquote><p>返回一个<code>fulfilled</code>的Promise实例，或者原始的Promise实例</p></blockquote><ul><li>参数为空，返回一个状态为<code>fulfilled</code>的Promise实例</li><li>参数是一个跟Promise无关的值，同上，不过<code>fulfilled</code>响应函数会得到这个参数</li><li>参数为Promise实例，则返回该实例，不做任何修改</li><li>参数为thenable，立刻执行它的.then()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Step 1'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">'Hello'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value, <span class="string">'world'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">'Good'</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;).then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value, <span class="string">'evening'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(&#123;</span><br><span class="line">    then() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">', everyone'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/WUhhEs8.png" alt=""></p><h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h3><p><code>Promise.race</code>方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p><p><code>Promise.race([p1, p2, p3]);</code></p><p>只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。</p><p>看一个<code>Promise.race</code>在实际开发中的应用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> delay = <span class="function"><span class="params">timeout</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> reject(<span class="string">'请求超时'</span>), timeout * <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> get = <span class="function">(<span class="params">&#123;url, params = &#123;&#125;, timeout&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> paramArr = []</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.keys(params).length !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">      paramArr.push(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> urlStr = <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;paramArr.join(<span class="string">'&amp;'</span>)&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (timeout === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fetch(urlStr)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Promise.race当数组中有一个promise返回则返回，其余的不再执行。如果超时了就不执行了</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.race([fetch(urlStr), delay(timeout)])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; get &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      JavaScript之promise异步编程
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="promise" scheme="http://yoursite.com/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的预编译过程</title>
    <link href="http://yoursite.com/2018/03/01/javascriptPrecompile/"/>
    <id>http://yoursite.com/2018/03/01/javascriptPrecompile/</id>
    <published>2018-03-01T09:28:25.000Z</published>
    <updated>2018-05-10T07:33:51.973Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript在运行时，要经历三步</p><ol><li>语法分析 2.预编译 3.解析执行(自上而下)</li></ol></blockquote><h2 id="JavaScript预编译"><a href="#JavaScript预编译" class="headerlink" title="JavaScript预编译"></a>JavaScript预编译</h2><p>先思考这么一个题<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> b =<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><h3 id="预编译四部曲"><a href="#预编译四部曲" class="headerlink" title="预编译四部曲"></a>预编译四部曲</h3><ol><li>创建AO对象 Activation Object（执行期上下文）</li><li>找形参和变量声明，将变量和形参名作为AO属性名，值为undefined</li><li>将实参值和形参统一</li><li>在函数体里面找函数声明，值赋予函数体</li></ol><p>这四步的权重比4&gt;3&gt;2&gt;1,也就是一个覆盖的过程.<br>函数声明在变量声明的前面</p><blockquote><p>函数声明才存在变量提升。即<code>function a(){};</code>,而<code>var b =function (){};</code>不会提升。</p></blockquote><h3 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h3><h4 id="先看一个面试中常遇到的问题"><a href="#先看一个面试中常遇到的问题" class="headerlink" title="先看一个面试中常遇到的问题"></a>先看一个面试中常遇到的问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// function a()&#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>逐行执行，在AO中是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AO&#123;</span><br><span class="line">  a: undefied</span><br><span class="line">&#125;</span><br><span class="line">AO&#123;</span><br><span class="line">  a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="换一换"><a href="#换一换" class="headerlink" title="换一换"></a>换一换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>逐行执行，在AO中是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AO&#123;</span><br><span class="line">  a: undefied</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line">  a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// js是自上而下执行的，先执行var a = 1; 所有AO中的a就被覆盖</span></span><br><span class="line">AO&#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="按步骤分析文章开头的例子"><a href="#按步骤分析文章开头的例子" class="headerlink" title="按步骤分析文章开头的例子"></a>按步骤分析文章开头的例子</h4><ul><li>第一步</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AO&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二步</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AO&#123;</span><br><span class="line">  a: <span class="literal">undefined</span>,</span><br><span class="line">  b: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第三步</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AO&#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第四步</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AO&#123;</span><br><span class="line">  a: <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  b: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解释执行"><a href="#解释执行" class="headerlink" title="解释执行"></a>解释执行</h2><p>执行的时候：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AO&#123;</span><br><span class="line">  a: <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  b: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a = 123;</span></span><br><span class="line">AO&#123;</span><br><span class="line">  a: <span class="number">123</span>,</span><br><span class="line">  b: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="结果"><a href="#结果" class="headerlink" title="结果:"></a>结果:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// function()&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 123</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> b =<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(b); <span class="comment">// function()&#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="加入window-全局环境"><a href="#加入window-全局环境" class="headerlink" title="加入window,全局环境"></a>加入window,全局环境</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">global = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(global);</span><br><span class="line">  global = <span class="number">200</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(global);</span><br><span class="line">  <span class="keyword">var</span> global = <span class="number">300</span>;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="keyword">var</span> global;</span><br></pre></td></tr></table></figure><p>在全局环境中会生成一个 GO对象 （Global Object），还是按照上面的四步执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GO &#123;</span><br><span class="line">  global: <span class="literal">undefined</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>// 执行到 <code>global = 100</code> :<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GO &#123;</span><br><span class="line">  global: <span class="number">100</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当执行<code>fn</code>之前会先生成一个AO:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AO &#123;</span><br><span class="line">  global: <span class="literal">undefined</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以第一次打印<code>global</code>是<code>undefined</code>。</p><blockquote><p>这个时候虽然全局变量中的<code>global</code>已经是<code>100</code>,但是<code>fn</code>函数中自己有<code>global</code>变量，所以不会引用全局中的。</p></blockquote><p>当执行到<code>global = 200</code> :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AO &#123;</span><br><span class="line">  global: <span class="number">200</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以第二次打印<code>global</code>是<code>200</code></p><blockquote><p>这里这中情况涉及到了‘作用域’。</p></blockquote><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><blockquote><p> JavaScript 采用的是词法作用域，函数的作用域在函数定义的时候就决定了。</p></blockquote><p>词法作用域是一种静态作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">2</span>;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar();</span><br></pre></td></tr></table></figure><p>这个例子的结果：1</p><h3 id="按静态作用域来分析"><a href="#按静态作用域来分析" class="headerlink" title="按静态作用域来分析"></a>按静态作用域来分析</h3><p>执行 foo 函数，先从 foo 函数内部查找是否有局部变量 value，如果没有，就根据书写的位置，查找上面一层的代码，也就是 value 等于 1，所以结果会打印 1。</p><h3 id="JavaScript的预编译过程来分析"><a href="#JavaScript的预编译过程来分析" class="headerlink" title="JavaScript的预编译过程来分析"></a>JavaScript的预编译过程来分析</h3><p>这里有全局的环境：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里我就写最后一步了</span></span><br><span class="line">GO &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  foo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(value)&#125;,</span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">var</span> value = <span class="number">2</span>; foo()&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数在执行时也会生成自己的AO</span></span><br><span class="line">fooAO&#123;</span><br><span class="line">  <span class="comment">// 没有</span></span><br><span class="line">&#125;</span><br><span class="line">barAO&#123;</span><br><span class="line">  value: <span class="number">2</span>，</span><br><span class="line">  foo: foo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/BOh1hJO.png" alt=""></p><p>foo函数中没有定义value，所以它会到它所在的上一层去找，并不会去bar里面找</p><p>把这个题做一个小小的改变：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    value = <span class="number">2</span>;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar();</span><br></pre></td></tr></table></figure><p>这样结果就是2了。<br><img src="https://i.imgur.com/JPpPtMu.png" alt=""></p><p>在bar函数中不定义value，而是让它直接改变value的值，他自己没有定义，它也会去全局GO里面找，这样bar里面的value和全局中的value就是同一个内存中的数，当代码执行到<code>value=2</code>，再执行foo()时，全局中的value也是2，所以输出2。在第一种，情况中，<code>var value=2</code>只改变了barAO中的值。</p><p>再来，我们再变一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    value = <span class="number">2</span>;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar();</span><br></pre></td></tr></table></figure></p><p>结果还是2.</p><p>这次我们没有全局定义value，在bar中也没有定义，而是直接赋值。在JavaScript中如果一个变量未声明就直接赋值，那么这个变量就是个全局变量。所以GO中会定义一个<code>value:2</code>,foo也没有去bar里面找value。</p><blockquote><p>静态作用域，决定的是作用域链的顺序。</p></blockquote><h2 id="最后思考一个问题"><a href="#最后思考一个问题" class="headerlink" title="最后思考一个问题"></a>最后思考一个问题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = b = <span class="number">100</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>var a = b =100;<br>先将100赋值给b，即b=100，此时b没有声明就被赋值。</p></blockquote>]]></content>
    
    <summary type="html">
    
      通过JavaScript的预编译过程，充分理解变量提升
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript常用排序算法</title>
    <link href="http://yoursite.com/2018/03/01/JavaScriptArithmetic/"/>
    <id>http://yoursite.com/2018/03/01/JavaScriptArithmetic/</id>
    <published>2018-03-01T02:15:37.000Z</published>
    <updated>2018-04-23T01:47:31.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="冒泡算法"><a href="#冒泡算法" class="headerlink" title="冒泡算法"></a>冒泡算法</h2><blockquote><p>原理：从第一个元素开始，往后比较，遇到自己小的元素就交换位置</p></blockquote><p><img src="http://p9.pstatp.com/large/31f700004cd560512e10" alt="此处输入图片的描述"><br>代码实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 冒泡算法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len<span class="number">-1</span>-i; j++) &#123;</span><br><span class="line"><span class="comment">// 为什么要减一，数组从0开始，先取第一个与第二个比，再将较大值与第三个比，一直比到最后一个，再拿第二个值与第三个比……(外层循环一次，内层循环多次)</span></span><br><span class="line">  <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123; <span class="comment">// 比较相邻两个值的大小</span></span><br><span class="line"><span class="keyword">var</span> temp = arr[j+<span class="number">1</span>]; <span class="comment">// 临时变量存储arr[j+1]的值</span></span><br><span class="line">arr[j+<span class="number">1</span>] = arr[j]; <span class="comment">// 将arr[j]的值赋值给arr[j+1]，即把较大值往后放</span></span><br><span class="line">arr[j] = temp; <span class="comment">// 又将temp的值赋值给arr[j]，即将较小值往前放</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">90</span>, <span class="number">16</span>, <span class="number">35</span>, <span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.log(bubbleSort(arr)); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 16, 35, 90]</span></span><br></pre></td></tr></table></figure></p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p><img src="http://p1.pstatp.com/large/32040001405eee3b0feb" alt="此处输入图片的描述"><br>Gif图：<br><img src="http://p3.pstatp.com/large/31f30005215262ad5c2c" alt="此处输入图片的描述"></p><blockquote><p>特点：<br>插入排序把要排序的数组分成两部分：<br>第一部分包含了这个数组的所有元素，但将第一个元素除外（让数组多一个空间才有插入的位置）。<br>第二部分就是包含了这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分<br>比冒泡排序快一点</p></blockquote><p>代码实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 从第二个元素开始，因为要留一个坑</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = arr[i]; <span class="comment">// 现将arr[i]的值存下来</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = i<span class="number">-1</span>; arr[j] &gt; x; j--) &#123;</span><br><span class="line">  arr[j+<span class="number">1</span>] = arr[j]; <span class="comment">// i=3时 [2, 3, 6, 6, ...]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[j+<span class="number">1</span>] != x) &#123;</span><br><span class="line">  arr[j+<span class="number">1</span>] = x; <span class="comment">// i=3时 j=2 [2, 3, 4, 6, ...]</span></span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">20</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(insertSort(arr)); <span class="comment">//[1, 2, 2, 3, 4, 5, 6, 20, 90, 100]</span></span><br></pre></td></tr></table></figure></p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p><img src="http://p9.pstatp.com/large/31f50001fa47898d558e" alt="此处输入图片的描述"></p><p><img src="http://p3.pstatp.com/large/31f7000052f9c0b67e86" alt="此处输入图片的描述"></p><p>  代码实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> gap = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">while</span> (gap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">  temp = arr[i];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &gt;= gap &amp;&amp; arr[j-gap] &gt; temp; j -= gap) &#123;</span><br><span class="line">    arr[j] = arr[j - gap];</span><br><span class="line">  &#125;</span><br><span class="line">  arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">gap = <span class="built_in">Math</span>.floor(gap / <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">20</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(shellSort(arr)); <span class="comment">//[1, 2, 2, 3, 4, 5, 6, 20, 90, 100]</span></span><br></pre></td></tr></table></figure></p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><img src="http://p1.pstatp.com/large/3202000045b4fa206217" alt="此处输入图片的描述"><br>3、对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。<br><img src="http://p3.pstatp.com/large/320b0000495f2a5aceaa" alt="此处输入图片的描述"></p><blockquote><p>特点：速度最快。和归并排序不同的是，归并排序是先分为两组再继续排，而快速排序是边分边排</p></blockquote><p>代码实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大致分三步：</span></span><br><span class="line"><span class="comment">// 1、找基准（一般以中间项为基准）</span></span><br><span class="line"><span class="comment">// 2、遍历数组，小于基准的放在left，大于基准的放在right</span></span><br><span class="line"><span class="comment">// 3、递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 如果数组&lt;=1，则直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> pivotIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">  <span class="comment">// 找基准，并把基准从原数组删除</span></span><br><span class="line">  <span class="keyword">var</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// 定义左右数组</span></span><br><span class="line">  <span class="keyword">var</span> left = [];</span><br><span class="line">  <span class="keyword">var</span> right = [];</span><br><span class="line">  <span class="comment">// 比基准小的放在left，比基准大的放在right</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &lt;= pivot) &#123;</span><br><span class="line">   left.push(arr[i]);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   right.push(arr[i]);</span><br><span class="line"> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 递归</span></span><br><span class="line">  <span class="keyword">return</span> quickSort(left).concat([pivot], quickSort(right));</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">20</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(quickSort(arr)); <span class="comment">//[1, 2, 2, 3, 4, 5, 6, 20, 90, 100]</span></span><br></pre></td></tr></table></figure></p><h2 id="奇偶排序"><a href="#奇偶排序" class="headerlink" title="奇偶排序"></a>奇偶排序</h2><p><img src="http://p3.pstatp.com/large/320200004c84b8c20819" alt="此处输入图片的描述"></p><p><img src="http://p3.pstatp.com/large/320200004d44a4a1bb61" alt="此处输入图片的描述"></p><p>代码实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//奇偶排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oddEvenSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="comment">// swaped用来控制循环是否要继续，如果左边的都比右边的小，则退出循环，返回排好的数组</span></span><br><span class="line">  <span class="keyword">var</span> swaped = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">var</span> k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(swaped) &#123;</span><br><span class="line">    <span class="keyword">if</span>(k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  swaped = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = k;i &lt; arr.length<span class="number">-1</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(arr[i] &gt; arr[i+<span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="comment">// 如果左边的数字比右边的大，两边交换位置</span></span><br><span class="line">    arr[i] = [arr[i+<span class="number">1</span>], arr[i+<span class="number">1</span>] = arr[i]][<span class="number">0</span>];</span><br><span class="line">swaped = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">k = [<span class="number">1</span>, <span class="number">0</span>][k]; <span class="comment">// 奇偶数之间的转换</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">20</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(oddEvenSort(arr)); <span class="comment">// [1, 2, 3, 4, 5, 6, 20, 90, 100]</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      JavaScript常用排序算法
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript —— New</title>
    <link href="http://yoursite.com/2018/02/27/new/"/>
    <id>http://yoursite.com/2018/02/27/new/</id>
    <published>2018-02-27T14:05:47.000Z</published>
    <updated>2018-04-23T01:47:31.483Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>热身<br>New 这个关键字 是创建对象的？<br>JS中万物皆是对象。<br>new 关键字是用来继承的。 =&gt; 面向对象的基础</p></blockquote><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DN</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.salary = <span class="string">'30k'</span>;</span><br><span class="line">&#125;</span><br><span class="line">DN.prototype.ability = <span class="number">100</span>;</span><br><span class="line">DN.prototype.sayYourName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'I am'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> DN(<span class="string">'张三'</span>, <span class="string">'18'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// 张三</span></span><br><span class="line">person.sayYourName(); <span class="comment">// I am张三</span></span><br></pre></td></tr></table></figure><blockquote><p>可以得出使用过New关键字之后生成的person对象具有哪些特点。<br>1：可以访问DN构造函数里的属性<br>2：可以访问到DN.prototype中的属性</p></blockquote><h2 id="经典继承-构造继承"><a href="#经典继承-构造继承" class="headerlink" title="经典继承(构造继承)"></a>经典继承(构造继承)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.names = [<span class="string">'Bios'</span>, <span class="string">'FinGet'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child();</span><br><span class="line">child1.names.push(<span class="string">'zhangsan'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child1.names); <span class="comment">// ["Bios", "FinGet", "zhangsan"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child();</span><br><span class="line"><span class="built_in">console</span>.log(child2.names); <span class="comment">// ["Bios", "FinGet"]</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/4EHPKyE.png" alt=""></p><h2 id="DNew"><a href="#DNew" class="headerlink" title="DNew"></a>DNew</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DNew</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">// 创建一个空对象</span></span><br><span class="line">  Constructor = [].shift.call(<span class="built_in">arguments</span>); <span class="comment">// 获取第一个参数即构造函数</span></span><br><span class="line">  obj.__proto__ = Constructor.prototype; <span class="comment">// 隐式原型指向显式原型 将obj的原型链指向构造函数，这样onj就可以访问到构造函数原型链上的属性</span></span><br><span class="line">  Constructor.apply(obj, <span class="built_in">arguments</span>); <span class="comment">// 使用apply(call)改变构造函数this的指向到新建的对象，这样obj可以访问构造函数的属性。这里的arguments是剔除了第一个参数的。</span></span><br><span class="line">  <span class="keyword">return</span> obj; <span class="comment">// 返回对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = DNew(DN,<span class="string">'张三'</span>, <span class="string">'18'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// 张三</span></span><br><span class="line">person.sayYourName(); <span class="comment">// I am张三</span></span><br></pre></td></tr></table></figure><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><blockquote><p>构造函数是可能有返回值的！</p></blockquote><h4 id="返回对象"><a href="#返回对象" class="headerlink" title="返回对象"></a>返回对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DN</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.salary = <span class="string">'30k'</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">  name: name,</span><br><span class="line">salary: <span class="string">"30k"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">DN.prototype.ability = <span class="number">100</span>;</span><br><span class="line">DN.prototype.sayYourName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'I am'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> DN(<span class="string">'张三'</span>, <span class="string">'18'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(person.age); <span class="comment">// undefined</span></span><br><span class="line">person.sayYourName(); <span class="comment">// error</span></span><br></pre></td></tr></table></figure><h4 id="返回基本类型"><a href="#返回基本类型" class="headerlink" title="返回基本类型"></a>返回基本类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DN</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.salary = <span class="string">'30k'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"finget"</span></span><br><span class="line">&#125;</span><br><span class="line">DN.prototype.ability = <span class="number">100</span>;</span><br><span class="line">DN.prototype.sayYourName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'I am'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> DN(<span class="string">'张三'</span>, <span class="string">'18'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// 张三</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// 18</span></span><br><span class="line">person.sayYourName(); <span class="comment">// I am张三</span></span><br></pre></td></tr></table></figure><ul><li>当构造函数的返回值为对象时，返回的内容能取到，其他内部属性和原型上的方法都取不到。</li><li>当构造函数的返回值为基本类型时， 跟没写<code>return</code>语句效果一样。</li></ul><h3 id="改进DNew"><a href="#改进DNew" class="headerlink" title="改进DNew"></a>改进DNew</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DNew</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">// 创建一个空对象</span></span><br><span class="line">  Constructor = [].shift.call(<span class="built_in">arguments</span>); <span class="comment">// 获取第一个参数即构造函数</span></span><br><span class="line">  obj.__proto__ = Constructor.prototype; <span class="comment">// 隐式原型指向显式原型 将obj的原型链指向构造函数，这样onj就可以访问到构造函数原型链上的属性</span></span><br><span class="line">  <span class="keyword">var</span> result = Constructor.apply(obj, <span class="built_in">arguments</span>); <span class="comment">// 使用apply(call)改变构造函数this的指向到新建的对象，这样obj可以访问构造函数的属性。这里的arguments是剔除了第一个参数的。</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">'object'</span> ? result : obj; <span class="comment">// 返回对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="当返回null的时候"><a href="#当返回null的时候" class="headerlink" title="当返回null的时候"></a>当返回null的时候</h3><blockquote><p>当构造函数返回<code>null</code>的时候，我们应该返回obj而不是result</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DNew</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">// 创建一个空对象</span></span><br><span class="line">  Constructor = [].shift.call(<span class="built_in">arguments</span>); <span class="comment">// 获取第一个参数即构造函数</span></span><br><span class="line">  obj.__proto__ = Constructor.prototype; <span class="comment">// 隐式原型指向显式原型 将obj的原型链指向构造函数，这样onj就可以访问到构造函数原型链上的属性</span></span><br><span class="line">  <span class="keyword">var</span> result = Constructor.apply(obj, <span class="built_in">arguments</span>); <span class="comment">// 使用apply(call)改变构造函数this的指向到新建的对象，这样obj可以访问构造函数的属性。这里的arguments是剔除了第一个参数的。</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">'object'</span> ? result || obj : obj; <span class="comment">// 返回对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>typeof null == Object;</p></blockquote><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><blockquote><p>var obj = {}; =&gt; var obj = new Object();我们在封装new，却在内部使用了new，所有需要改变一下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DNew</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// var obj = &#123;&#125;; // var obj = new Object() 创建一个空对象 </span></span><br><span class="line">  <span class="comment">// var obj = Object.create(null);</span></span><br><span class="line">  Constructor = [].shift.call(<span class="built_in">arguments</span>); <span class="comment">// 获取第一个参数即构造函数</span></span><br><span class="line">  <span class="comment">// obj.__proto__ = Constructor.prototype; </span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(Constructor.prototype);</span><br><span class="line">  <span class="keyword">var</span> result = Constructor.apply(obj, <span class="built_in">arguments</span>); </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">'object'</span> ? result || obj : obj; <span class="comment">// 返回对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码过程-我自己看"><a href="#代码过程-我自己看" class="headerlink" title="代码过程(我自己看)"></a>代码过程(我自己看)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 热身</span></span><br><span class="line"><span class="comment">// New 这个关键字 是创建对象的？</span></span><br><span class="line"><span class="comment">// JS中万物皆是对象。</span></span><br><span class="line"><span class="comment">// new 关键字是用来继承的。 =&gt; 面向对象的基础</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DN</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.salary = <span class="string">'30k'</span>;</span><br><span class="line">&#125;</span><br><span class="line">DN.prototype.ability = <span class="number">100</span>;</span><br><span class="line">DN.prototype.sayYourName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'I am'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> DN(<span class="string">'张三'</span>, <span class="string">'18'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line">person.sayYourName();</span><br><span class="line"><span class="comment">// 可以得出使用过New关键字之后生成的person对象具有哪些特点。</span></span><br><span class="line"><span class="comment">// 1：可以访问DN构造函数里的属性</span></span><br><span class="line"><span class="comment">// 2：可以访问到DN.prototype中的属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 要如何去实现</span></span><br><span class="line"><span class="comment">// 经典继承（借用构造函数的方式）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.names = [<span class="string">'Bios'</span>, <span class="string">'FinGet'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child();</span><br><span class="line">child1.names.push(<span class="string">'zhangsan'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child1.names); <span class="comment">// ["Bios", "FinGet", "zhangsan"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child();</span><br><span class="line"><span class="built_in">console</span>.log(child2.names); <span class="comment">// ["Bios", "FinGet"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 避免引用类型的属性，被所有实例对象共享</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、怎么获取原型链上的属性</span></span><br><span class="line"><span class="comment">// __proto__</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DNew</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// var obj = &#123;&#125;; // var obj = new Object() 创建一个空对象 </span></span><br><span class="line">  <span class="comment">// var obj = Object.create(null);</span></span><br><span class="line">  Constructor = [].shift.call(<span class="built_in">arguments</span>); <span class="comment">// 获取第一个参数即构造函数</span></span><br><span class="line">  <span class="comment">// obj.__proto__ = Constructor.prototype; </span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(Constructor.prototype);</span><br><span class="line">  <span class="keyword">var</span> result = Constructor.apply(obj, <span class="built_in">arguments</span>); </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">'object'</span> ? result || obj : obj; <span class="comment">// 返回对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">root, factory</span>)</span>&#123;</span><br><span class="line">  root.$ = root.DN = factory();</span><br><span class="line">&#125;)(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> DN = &#123;</span><br><span class="line">DNew: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// var obj = &#123;&#125;; // var obj = new Object() 创建一个空对象 </span></span><br><span class="line">  <span class="comment">// var obj = Object.create(null);</span></span><br><span class="line">  Constructor = [].shift.call(<span class="built_in">arguments</span>); <span class="comment">// 获取第一个参数即构造函数</span></span><br><span class="line">  <span class="comment">// obj.__proto__ = Constructor.prototype; </span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(Constructor.prototype);</span><br><span class="line">  <span class="keyword">var</span> result = Constructor.apply(obj, <span class="built_in">arguments</span>); </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">'object'</span> ? result || obj : obj; <span class="comment">// 返回对象</span></span><br><span class="line">&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> DN;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      new构建实例的过程实现
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>初识函数式编程</title>
    <link href="http://yoursite.com/2018/02/26/functionalProgramming/"/>
    <id>http://yoursite.com/2018/02/26/functionalProgramming/</id>
    <published>2018-02-26T08:55:42.000Z</published>
    <updated>2018-04-23T01:47:31.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是函数式编程？"><a href="#什么是函数式编程？" class="headerlink" title="什么是函数式编程？"></a>什么是函数式编程？</h2><blockquote><p>函数式编程的本质，函数式编程中的函数这个术语不是指计算机中的函数，而是指数学中的函数，即自变量的映射。也就是说一个函数的值仅决定于函数参数的值，不依赖其他状态。比如sqrt(x)函数计算x的平方根，只要x不变，无论什么时候调用，调用几次，值都是不变的。</p></blockquote><h2 id="有什么好处？"><a href="#有什么好处？" class="headerlink" title="有什么好处？"></a>有什么好处？</h2><blockquote><p>函数式的最主要的好处是不可变性带来的。没有可变的状态，函数就是引用透明的没有副作用。函数即不依赖外部的状态也不修改外部的状态，函数调用的结果不依赖调用的时间和位置，这样写的代码容易进行推理，不容易出错。这使得单元测试和调试更容易。</p></blockquote><h2 id="在那些地方用到了？"><a href="#在那些地方用到了？" class="headerlink" title="在那些地方用到了？"></a>在那些地方用到了？</h2><blockquote><p>随着React、vue的火热，函数式编程的概念也开始流行起来，多种前端状态管理框架Flux redux Vuex早期的underscore RxJS库都使用了函数式的特性。</p></blockquote>]]></content>
    
    <summary type="html">
    
      通过JavaScript初步了解函数式编程
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>初识JavaScript柯理化</title>
    <link href="http://yoursite.com/2018/02/26/curry/"/>
    <id>http://yoursite.com/2018/02/26/curry/</id>
    <published>2018-02-26T08:20:56.000Z</published>
    <updated>2018-04-23T01:47:31.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是柯理化"><a href="#什么是柯理化" class="headerlink" title="什么是柯理化"></a>什么是柯理化</h2><blockquote><p>在计算机科学中，柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。</p></blockquote><p>把含有N个参数的函数转变成，N个只有一个参数的函数。</p><p>中心思想：降低通用性，提高适用性。</p><blockquote><p>通用的设计比适用的设计复杂，因此更难使用。</p></blockquote><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul><li>参数复用</li><li>提前返回 (return)</li><li>延迟执行</li></ul><h2 id="参数复用"><a href="#参数复用" class="headerlink" title="参数复用"></a>参数复用</h2><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>瑞士军刀，上面有小剪刀，但是这个小剪刀肯定没有一个单独的剪刀好用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> i * i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dubble</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dobble</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> i * <span class="number">1.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">handeler, list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> list.map(handeler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 必须要传第一个参数，才能使用map函数</span></span><br><span class="line"><span class="built_in">console</span>.log(map(square, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]));</span><br><span class="line"><span class="built_in">console</span>.log(map(square, [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]));</span><br><span class="line"><span class="comment">// 容易混淆</span></span><br><span class="line"><span class="built_in">console</span>.log(map(dubble, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]));</span><br><span class="line"><span class="built_in">console</span>.log(map(dobble, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]));</span><br><span class="line"><span class="built_in">console</span>.log(map(dubble, [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提高适用性 语义清除，方便使用</span></span><br><span class="line"><span class="comment">// 假设存在一个curry方法</span></span><br><span class="line"><span class="keyword">var</span> mapSQ = curry(map, square);</span><br><span class="line">mapSQ([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line">mapSQ([<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mapDQ = curry(map, dubble);</span><br><span class="line">mapDQ([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line">mapDQ([<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">type, url, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(type, url, <span class="literal">true</span>);</span><br><span class="line">  xhr.send();</span><br><span class="line">&#125;</span><br><span class="line">ajax(<span class="string">'POST'</span>, <span class="string">'www.baidu.com'</span>, <span class="string">'name=finget'</span>);</span><br><span class="line">ajax(<span class="string">'POST'</span>, <span class="string">'www.baidu.com'</span>, <span class="string">'name=bios'</span>);</span><br><span class="line">ajax(<span class="string">'POST'</span>, <span class="string">'www.baidu.com'</span>, <span class="string">'name=mario'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 柯理化 减少参数</span></span><br><span class="line"><span class="keyword">var</span> ajaxCurry = curry(ajax);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用POST请求</span></span><br><span class="line"><span class="keyword">var</span> post = ajaxCurry(<span class="string">'POST'</span>);</span><br><span class="line">post(<span class="string">'www.baidu.com'</span>,<span class="string">'name=finget'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postFromBaidu = post(<span class="string">'www.baidu.com'</span>);</span><br><span class="line">postToBaidu(<span class="string">'name=finget'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上代码类似与 $.ajax =&gt; $.post / $.get</span></span><br></pre></td></tr></table></figure><ul><li>参数的多少跟函数体的复杂性成正比</li><li>参数的多少跟函数的维护难度成正比</li><li>参数的多少跟用户的使用难度成正比</li></ul><blockquote><p>成熟的框架jquery, lodash 一个方法基本不超过4个参数。大多数就是3个或者2个参数，方法体不超过40行</p></blockquote><h4 id="一个简单的柯理化函数"><a href="#一个简单的柯理化函数" class="headerlink" title="一个简单的柯理化函数"></a>一个简单的柯理化函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">5</span>,<span class="number">10</span>)); <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> curryAdd = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(curryAdd(<span class="number">5</span>)(<span class="number">10</span>)); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add5 = curryAdd(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 这里就类似与var post = ajaxCurry('POST');</span></span><br><span class="line"><span class="built_in">console</span>.log(add5(<span class="number">10</span>)); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><h2 id="延迟执行"><a href="#延迟执行" class="headerlink" title="延迟执行"></a>延迟执行</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fishWeight = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> addWeight = <span class="function"><span class="keyword">function</span>(<span class="params">weight</span>)</span>&#123;</span><br><span class="line">  fishWeight += weight;</span><br><span class="line">&#125;</span><br><span class="line">addWeight(<span class="number">2.3</span>);</span><br><span class="line">addWeight(<span class="number">6.5</span>);</span><br><span class="line">addWeight(<span class="number">1.2</span>);</span><br><span class="line">addWeight(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fishWeight); <span class="comment">// 13</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> curryWeight = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _fishWeight = [];</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// apply会执行函数</span></span><br><span class="line">  <span class="comment">// 传入参数时，先把他们存在数组中，当没有传参就执行计算</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, _fishWeight);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// [].slice.call(arguments) 复制一下我们的arguments然后将内容加到我们的_fishWeight中</span></span><br><span class="line">  _fishWeight = _fishWeight.concat([].slice.call(<span class="built_in">arguments</span>));</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> curryAddWeight = curryWeight(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>; len = <span class="built_in">arguments</span>.length;</span><br><span class="line">  <span class="keyword">for</span> (i; i &lt; len; i++) &#123;</span><br><span class="line">    fishWeight += <span class="built_in">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curryAddWeight(<span class="number">2.3</span>);</span><br><span class="line">curryAddWeight(<span class="number">6.5</span>);</span><br><span class="line">curryAddWeight(<span class="number">1.2</span>);</span><br><span class="line">curryAddWeight(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// curryAddWeight(); 不加这句，console.log(fishWeight); // 0</span></span><br><span class="line"><span class="built_in">console</span>.log(fishWeight); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>柯理化后的函数是可以复用的<br>// 求平均值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> avgWeight = curryWeight(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>; len = <span class="built_in">arguments</span>.length;</span><br><span class="line">  <span class="keyword">for</span> (i; i &lt; len; i++) &#123;</span><br><span class="line">    fishWeight += <span class="built_in">arguments</span>[i] / len;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">avgWeight(<span class="number">2.3</span>);</span><br><span class="line">avgWeight(<span class="number">6.5</span>);</span><br><span class="line">avgWeight(<span class="number">1.2</span>);</span><br><span class="line">avgWeight(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// avgWeight(); 不加这句，console.log(fishWeight); // 0</span></span><br><span class="line"><span class="built_in">console</span>.log(fishWeight); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h2 id="实现一个通用的一元curry函数"><a href="#实现一个通用的一元curry函数" class="headerlink" title="实现一个通用的一元curry函数"></a>实现一个通用的一元curry函数</h2><ul><li>curry函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn, args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> length = fn.length; <span class="comment">// 方法参数个数 *注1</span></span><br><span class="line">  args = args || [];</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _args = args.slice(<span class="number">0</span>), arg, i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">  arg = <span class="built_in">arguments</span>[i];</span><br><span class="line">  _args.push(arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (_args.length &lt; length) &#123;</span><br><span class="line">  <span class="keyword">return</span> curry.call(<span class="keyword">this</span>, fn, _args);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, _args);</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注1：var length = fn.length; // 方法参数个数 *注1<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.dir(add);</span><br></pre></td></tr></table></figure></p></blockquote><p><img src="https://i.imgur.com/c1ZhiPE.png" alt=""></p><ul><li>使用curry函数</li></ul><blockquote><p>这个curry方法可以解决一元柯理化的场景，不是万能的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> curryAdd = curry(add);</span><br><span class="line"><span class="keyword">var</span> curryAdd5 = curry(add, [<span class="number">5</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(curryAdd(<span class="number">5</span>)(<span class="number">10</span>)); <span class="comment">// 15</span></span><br><span class="line"><span class="built_in">console</span>.log(curryAdd5(<span class="number">10</span>)); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> curryAdd = curry(add);</span><br><span class="line"><span class="keyword">var</span> curryAdd5 = curry(add, [<span class="number">5</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(curryAdd(<span class="number">5</span>)(<span class="number">10</span>)(<span class="number">15</span>)); <span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(curryAdd(<span class="number">5</span>,<span class="number">10</span>)(<span class="number">15</span>)); <span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(curryAdd(<span class="number">5</span>)(<span class="number">10</span>,<span class="number">15</span>)); <span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(curryAdd(<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>));<span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(curryAdd5(<span class="number">10</span>)(<span class="number">15</span>));<span class="comment">// 30</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      初步认识柯理化
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>四大维度解锁webpack3笔记</title>
    <link href="http://yoursite.com/2018/02/08/webpack/"/>
    <id>http://yoursite.com/2018/02/08/webpack/</id>
    <published>2018-02-08T02:44:38.000Z</published>
    <updated>2018-04-23T01:47:31.484Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NbPRvzp.png" alt=""></p><h2 id="Webpack简介"><a href="#Webpack简介" class="headerlink" title="Webpack简介"></a>Webpack简介</h2><h3 id="Webpack-概述"><a href="#Webpack-概述" class="headerlink" title="Webpack 概述"></a>Webpack 概述</h3><blockquote><p>本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。</p></blockquote><p><img src="https://i.imgur.com/hyxOIz4.png" alt=""><br><a href="https://webpack.js.org/" target="_blank" rel="noopener"><strong>Webpack官网</strong></a></p><h3 id="Webpack-的版本更迭"><a href="#Webpack-的版本更迭" class="headerlink" title="Webpack 的版本更迭"></a>Webpack 的版本更迭</h3><ul><li>Webpack v1.0.0 — 2014.2.20</li><li>Webpack v2.2.0 — 2017.1.18</li><li>Webpack v3.0.0 — 2017.6.19</li></ul><h3 id="Webpack-功能进化"><a href="#Webpack-功能进化" class="headerlink" title="Webpack 功能进化"></a>Webpack 功能进化</h3><ul><li>Webpack V1<ul><li>编译、打包</li><li>HMR(模块热更新)</li><li>代码分割</li><li>文件处理(loader、plugin)</li></ul></li><li>Webpack V2<ul><li>Tree Shaking(在项目中没有实际运用的代码会被删除，打包体积更小)</li><li>ES module</li><li>动态Import</li></ul></li><li>Webpack V3<ul><li>Scope Hoisting(作用域提升)</li><li>Magic Comments(配合动态import使用)</li></ul></li></ul><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h3><blockquote><p>代码的入口，打包入口</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个入口</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'index.js'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 推荐写法</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">index: <span class="string">'index.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 多个入口</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    pageOne: <span class="string">'./src/pageOne/index.js'</span>,</span><br><span class="line">    pageTwo: <span class="string">'./src/pageTwo/index.js'</span>,</span><br><span class="line">    pageThree: <span class="string">'./src/pageThree/index.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/app.js'</span>,</span><br><span class="line">    search: <span class="string">'./src/search.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].js'</span>, <span class="comment">// 打包之后的文件名 [name]就对应entry里面的key值。</span></span><br><span class="line">    path: __dirname + <span class="string">'/dist'</span> <span class="comment">// 打包输出文件路径</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Loaders"><a href="#Loaders" class="headerlink" title="Loaders"></a>Loaders</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单个loader</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: <span class="string">'css-loader'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, <span class="attr">use</span>: <span class="string">'ts-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多个loader</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>, <span class="comment">// 正则匹配css文件</span></span><br><span class="line">        use: [</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">'style-loader'</span> &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">            options: &#123; <span class="comment">// loader配置</span></span><br><span class="line">              modules: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>); <span class="comment">//installed via npm</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: <span class="string">'babel-loader'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">'./src/index.html'</span>&#125;) <span class="comment">// 根据`./src/index.html`生成一个首页，会引入打包的js、css文件</span></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><h2 id="使用Webpack"><a href="#使用Webpack" class="headerlink" title="使用Webpack"></a>使用Webpack</h2><h3 id="安装Webpack"><a href="#安装Webpack" class="headerlink" title="安装Webpack"></a>安装Webpack</h3><p><code>npm i -g webpack</code><br>当然你得先安装nodejs、Git</p><p>在命令行输入<code>webpack -h</code>，成功就出现下图，有很多webpack命令可以看一看<br><img src="https://i.imgur.com/U53NRJ8.png" alt=""></p><h3 id="打包js"><a href="#打包js" class="headerlink" title="打包js"></a>打包js</h3><p><code>webpack entry&lt;entry&gt; output</code><br><code>webpack --config webpack.config.js</code></p><h4 id="第一个栗子"><a href="#第一个栗子" class="headerlink" title="第一个栗子"></a>第一个栗子</h4><p>新建一个app.js和sum.js</p><p>app.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es module</span></span><br><span class="line"><span class="keyword">import</span> sum form <span class="string">'./sum'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sun(<span class="number">1</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure></p><p>sum.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过命令行打包：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">webpack app.js bundle.js</span><br><span class="line"><span class="comment">// app.js 是入口文件 bundle.js是打包输出文件</span></span><br></pre></td></tr></table></figure></p><h3 id="编译ES6"><a href="#编译ES6" class="headerlink" title="编译ES6"></a>编译ES6</h3><p>需要两个loader：<br><code>npm i babel-loader babel-core -D</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">entry: &#123;</span><br><span class="line">app: <span class="string">'app.js'</span></span><br><span class="line">&#125;,</span><br><span class="line">output: &#123;</span><br><span class="line">filename: <span class="string">'[name].[hash:8].js'</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">use: <span class="string">'babel-loader'</span>,</span><br><span class="line">exclude: <span class="string">'/node_modules/'</span> <span class="comment">// 将node_module中的文件排除在外，因为已经是编译过的</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>{ test: Condition }</code>：匹配特定条件。一般是提供一个正则表达式或正则表达式的数组，但这不是强制的。</p><p><code>{ include: Condition }</code>：匹配特定条件。一般是提供一个字符串或者字符串数组，但这不是强制的。</p><p><code>{ exclude: Condition }</code>：排除特定条件。一般是提供一个字符串或字符串数组，但这不是强制的。</p><p><code>{ and: [Condition] }</code>：必须匹配数组中的所有条件</p><p><code>{ or: [Condition] }</code>：匹配数组中任何一个条件</p><p><code>{ not: [Condition] }</code>：必须排除这个条件</p><h4 id="Babel-Presets"><a href="#Babel-Presets" class="headerlink" title="Babel Presets"></a>Babel Presets</h4><p>虽然引入了<code>babel-loader</code>，但是它并不知道是根据什么规范来打包的，这个时候就需要配置一个Babel Presets（预设）<br><code>npm i babel-preset-env -D</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">use: &#123;</span><br><span class="line">loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">options: &#123; <span class="comment">// options 属性为字符串或对象。值可以传递到 loader 中，将其理解为 loader 选项。</span></span><br><span class="line">presets: [<span class="string">'babel-preset-env'</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">exclude: <span class="string">'/node_modules/'</span> <span class="comment">// 将node_module中的文件排除在外，因为已经是编译过的</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Babel-Polyfill"><a href="#Babel-Polyfill" class="headerlink" title="Babel Polyfill"></a>Babel Polyfill</h4><p><code>npm install --save babel-polyfill</code><br>使用babel-polyfill<br><code>import &#39;babel-polyfill&#39;</code></p><p>Babel 默认只转换新的 JavaScript 语法，而不转换新的 API。例如，Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转译。如果想使用这些新的对象和方法，必须使用 babel-polyfill，为当前环境提供一个垫片。</p><blockquote><p>Polyfill 垫片：<br><code>polyfill</code>这个英文单词在js babel中的翻译可以说是垫片，本来指的是衣服中的填充物。<br>在这里可以说是为了使用某个浏览器或者其他执行环境不支持的函数或者对象能够使用而添加的原型方法，或者第三方库。</p></blockquote><p>例如：<br>我们想要使用es2015的语法中的某些新的对象方法或者数据类型，就需要添加<code>babel-polyfill</code>，例如<code>Array.from</code>方法很多浏览器不支持，你就需要垫片来提高兼容性。<br>为了在版本低浏览器中能够使用<code>promise</code>，我们需要提前执行一个<code>promise</code>文件，以便能够在全局中使用。</p><h4 id="babel-runtime"><a href="#babel-runtime" class="headerlink" title="babel-runtime"></a>babel-runtime</h4><p><code>npm i --save babel-runtime</code><br>Babel 转译后的代码要实现源代码同样的功能需要借助一些帮助函数，例如，{ [name]: ‘JavaScript’ } 转译后的代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_defineProperty</span>(<span class="params">obj, key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">      value: value,</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      configurable: <span class="literal">true</span>,</span><br><span class="line">      writable: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    obj[key] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = _defineProperty(&#123;&#125;, <span class="string">'name'</span>, <span class="string">'JavaScript'</span>);</span><br></pre></td></tr></table></figure></p><p>类似上面的帮助函数 _defineProperty 可能会重复出现在一些模块里，导致编译后的代码体积变大。Babel 为了解决这个问题，提供了单独的包 <code>babel-runtime</code> 供编译模块复用工具函数。</p><p><code>npm i babel-plugin-transform-runtime -D</code></p><p>新建<code>.babelrc</code>文件,之前是直接将presets设置在loader中的，也可以单独写在<code>.babelrc</code>文件中，babel会自动读取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;presets&quot;: [</span><br><span class="line">[&quot;babel-preset-env&quot;]</span><br><span class="line">],</span><br><span class="line">&quot;plugins&quot;: [&quot;transform-runtime&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启用插件 <code>babel-plugin-transform-runtime</code> 后，Babel 就会使用 <code>babel-runtime</code> 下的工具函数，转译代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="comment">// 之前的 _defineProperty 函数已经作为公共模块 `babel-runtime/helpers/defineProperty` 使用</span></span><br><span class="line"><span class="keyword">var</span> _defineProperty2 = <span class="built_in">require</span>(<span class="string">'babel-runtime/helpers/defineProperty'</span>);</span><br><span class="line"><span class="keyword">var</span> _defineProperty3 = _interopRequireDefault(_defineProperty2);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_interopRequireDefault</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> obj &amp;&amp; obj.__esModule ? obj : &#123; <span class="attr">default</span>: obj &#125;; &#125;</span><br><span class="line"><span class="keyword">var</span> obj = (<span class="number">0</span>, _defineProperty3.default)(&#123;&#125;, <span class="string">'name'</span>, <span class="string">'JavaScript'</span>);</span><br></pre></td></tr></table></figure></p><p>除此之外，babel 还为源代码的非实例方法（Object.assign，实例方法是类似这样的 “foobar”.includes(“foo”)）和 babel-runtime/helps 下的工具函数自动引用了 polyfill。这样可以避免污染全局命名空间，非常适合于 JavaScript 库和工具包的实现。例如 const obj = {}, Object.assign(obj, { age: 30 }); 转译后的代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="comment">// 使用了 core-js 提供的 assign</span></span><br><span class="line"><span class="keyword">var</span> _assign = <span class="built_in">require</span>(<span class="string">'babel-runtime/core-js/object/assign'</span>);</span><br><span class="line"><span class="keyword">var</span> _assign2 = _interopRequireDefault(_assign);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_interopRequireDefault</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> obj &amp;&amp; obj.__esModule ? obj : &#123; <span class="attr">default</span>: obj &#125;; &#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">(<span class="number">0</span>, _assign2.default)(obj, &#123;</span><br><span class="line">  age: <span class="number">30</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h3><blockquote><p>js的超集，可以在typescript中写JavaScript</p></blockquote><h4 id="typescript-loader"><a href="#typescript-loader" class="headerlink" title="typescript-loader"></a>typescript-loader</h4><p>官方loader<br><code>npm i typescript ts-loader -D</code><br>第三方loader<br><code>npm i typescript awesome-typescript-loader -D</code></p><p>webpack.config.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="string">'app'</span>: <span class="string">'./src/app.ts'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: &#123;</span><br><span class="line">      test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">      use: &#123;</span><br><span class="line">        loader: <span class="string">'ts-loader'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>tsconfig.json<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span> : &#123;</span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"es5"</span>, <span class="comment">// 将ts编译成es5语法</span></span><br><span class="line">    <span class="string">"allowJs"</span>: <span class="literal">true</span>  <span class="comment">// 是否允许出现js语法</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"include"</span>: &#123;</span><br><span class="line">    <span class="string">"./src/*"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"exclude"</span>: &#123;</span><br><span class="line">    <span class="string">"./node_module"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="打包公共代码"><a href="#打包公共代码" class="headerlink" title="打包公共代码"></a>打包公共代码</h3><h4 id="CommonsChunkPlugin"><a href="#CommonsChunkPlugin" class="headerlink" title="CommonsChunkPlugin"></a>CommonsChunkPlugin</h4><h5 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  name: string, <span class="comment">// or</span></span><br><span class="line">  names: string[],</span><br><span class="line">  <span class="comment">// 这是 common chunk 的名称。已经存在的 chunk 可以通过传入一个已存在的 chunk 名称而被选择。</span></span><br><span class="line">  <span class="comment">// 如果一个字符串数组被传入，这相当于插件针对每个 chunk 名被多次调用</span></span><br><span class="line">  <span class="comment">// 如果该选项被忽略，同时 `options.async` 或者 `options.children` 被设置，所有的 chunk 都会被使用，</span></span><br><span class="line">  <span class="comment">// 否则 `options.filename` 会用于作为 chunk 名。</span></span><br><span class="line">  <span class="comment">// When using `options.async` to create common chunks from other async chunks you must specify an entry-point</span></span><br><span class="line">  <span class="comment">// chunk name here instead of omitting the `option.name`.</span></span><br><span class="line"></span><br><span class="line">  filename: string,</span><br><span class="line">  <span class="comment">// common chunk 的文件名模板。可以包含与 `output.filename` 相同的占位符。</span></span><br><span class="line">  <span class="comment">// 如果被忽略，原本的文件名不会被修改(通常是 `output.filename` 或者 `output.chunkFilename`)。</span></span><br><span class="line">  <span class="comment">// This option is not permitted if you're using `options.async` as well, see below for more details.</span></span><br><span class="line"></span><br><span class="line">  minChunks: number|<span class="literal">Infinity</span>|<span class="function"><span class="keyword">function</span>(<span class="params">module, count</span>) -&gt; <span class="title">boolean</span>,</span></span><br><span class="line"><span class="function">  // 在传入  公共<span class="title">chunk</span>(<span class="params">commons chunk</span>) 之前所需要包含的最少数量的 <span class="title">chunks</span> 。</span></span><br><span class="line"><span class="function">  // 数量必须大于等于2，或者少于等于 <span class="title">chunks</span>的数量</span></span><br><span class="line"><span class="function">  // 传入 `<span class="title">Infinity</span>` 会马上生成 公共<span class="title">chunk</span>，但里面没有模块。</span></span><br><span class="line"><span class="function">  // 你可以传入一个 `<span class="title">function</span>` ，以添加定制的逻辑（默认是 <span class="title">chunk</span> 的数量）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line">  chunks: string[],</span><br><span class="line">  <span class="comment">// 通过 chunk name 去选择 chunks 的来源。chunk 必须是  公共chunk 的子模块。</span></span><br><span class="line">  <span class="comment">// 如果被忽略，所有的，所有的 入口chunk (entry chunk) 都会被选择。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  children: boolean,</span><br><span class="line">  <span class="comment">// 如果设置为 `true`，所有  公共chunk 的子模块都会被选择</span></span><br><span class="line"></span><br><span class="line">  deepChildren: boolean,</span><br><span class="line">  <span class="comment">// If `true` all descendants of the commons chunk are selected</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span>: boolean|string,</span><br><span class="line">  <span class="comment">// 如果设置为 `true`，一个异步的  公共chunk 会作为 `options.name` 的子模块，和 `options.chunks` 的兄弟模块被创建。</span></span><br><span class="line">  <span class="comment">// 它会与 `options.chunks` 并行被加载。</span></span><br><span class="line">  <span class="comment">// Instead of using `option.filename`, it is possible to change the name of the output file by providing</span></span><br><span class="line">  <span class="comment">// the desired string here instead of `true`.</span></span><br><span class="line"></span><br><span class="line">  minSize: number,</span><br><span class="line">  <span class="comment">// 在 公共chunk 被创建立之前，所有 公共模块 (common module) 的最少大小。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="string">'pageA'</span>: <span class="string">'./src/pageA'</span>,</span><br><span class="line">    <span class="string">'pageB'</span>: <span class="string">'./src/pageB'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].chunk.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'common'</span>,</span><br><span class="line">      minChunks: <span class="number">2</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pageA.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./subPageA'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./subPageB'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'pageA'</span>;</span><br></pre></td></tr></table></figure></p><p>pageB.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./subPageA'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./subPageB'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'pageB'</span>;</span><br></pre></td></tr></table></figure></p><p>subPageA.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./moudleA'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'subPageA'</span></span><br></pre></td></tr></table></figure></p><p>subPageB.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &apos;./moudleA&apos;;</span><br><span class="line">export default &apos;subPageB&apos;</span><br></pre></td></tr></table></figure></p><p>moduleA.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'moduleA'</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/TzdtOpP.png" alt=""></p><h3 id="代码分割-和-懒加载"><a href="#代码分割-和-懒加载" class="headerlink" title="代码分割 和 懒加载"></a>代码分割 和 懒加载</h3><blockquote><p>并不是通过配置webpack实现代码分割和懒加载，而是通过改变写代码的方式</p></blockquote><h4 id="两种实现方法"><a href="#两种实现方法" class="headerlink" title="两种实现方法"></a>两种实现方法</h4><h5 id="webpack-methods"><a href="#webpack-methods" class="headerlink" title="webpack methods"></a>webpack methods</h5><h6 id="require-ensure"><a href="#require-ensure" class="headerlink" title="require.ensure"></a>require.ensure</h6><ul><li>[]: dependencies</li><li>callback</li><li>errorCallback</li><li>chunkName</li></ul><h6 id="require-include"><a href="#require-include" class="headerlink" title="require.include"></a>require.include</h6><h5 id="ES-2015-Loader-spec"><a href="#ES-2015-Loader-spec" class="headerlink" title="ES 2015 Loader spec"></a>ES 2015 Loader spec</h5><p>System.import() -&gt; import()<br>import() -&gt; Promise<br>import().then()</p><h4 id="代码分割场景"><a href="#代码分割场景" class="headerlink" title="代码分割场景"></a>代码分割场景</h4><ul><li>分离业务代码 和 第三方依赖</li><li>分离业务代码 和 业务公共代码 和 第三方依赖</li><li>分离首次加载 和 访问后加载的代码 (优化，首屏加载)</li></ul><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="string">'pageA'</span>: <span class="string">'./src/pageA'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">publicPath: <span class="string">'./dist/'</span>,</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].chunk.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pageA.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./subPageA'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./subPageB'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import * as _ from 'lodash'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'lodash'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 这一步是引入lodash并不会执行</span></span><br><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>); <span class="comment">// 这一步就会执行lodash， 异步加载</span></span><br><span class="line">_.join([<span class="string">'1'</span>,<span class="string">'2'</span>],<span class="string">'3'</span>); <span class="comment">// 可以使用lodash</span></span><br><span class="line">&#125;,<span class="string">'vendor'</span>) <span class="comment">// 'vendor'为 chunk name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的代码也可以写成</span></span><br><span class="line"><span class="built_in">require</span>.ensure([],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>); </span><br><span class="line">_.join([<span class="string">'1'</span>,<span class="string">'2'</span>],<span class="string">'3'</span>);</span><br><span class="line">&#125;,<span class="string">'vendor'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'pageA'</span>;</span><br></pre></td></tr></table></figure></p><p>subPageA.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./moudleA'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'subPageA'</span></span><br></pre></td></tr></table></figure></p><p>subPageB.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./moudleA'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'subPageB'</span></span><br></pre></td></tr></table></figure></p><p>moduleA.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'moduleA'</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/f2BctzC.png" alt=""></p><h5 id="按条件加载模块"><a href="#按条件加载模块" class="headerlink" title="按条件加载模块"></a>按条件加载模块</h5><p>pageA.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码 按条件加载模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(page === <span class="string">'subpageA'</span>) &#123;</span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'./subPageA'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> subpageA = <span class="built_in">require</span>(<span class="string">'./subPageA'</span>);</span><br><span class="line">&#125;,<span class="string">'subPageA'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (page === <span class="string">'subpageB'</span>) &#123;</span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'./subPageB'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> subpageB = <span class="built_in">require</span>(<span class="string">'./subPageB'</span>);</span><br><span class="line">&#125;,<span class="string">'subPageB'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>.ensure([],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>); </span><br><span class="line">_.join([<span class="string">'1'</span>,<span class="string">'2'</span>],<span class="string">'3'</span>);</span><br><span class="line">&#125;,<span class="string">'vendor'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'pageA'</span>;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/FLAp7V9.png" alt=""></p><h4 id="动态import"><a href="#动态import" class="headerlink" title="动态import"></a>动态import</h4><p>pageA.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码 按条件加载模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(page === <span class="string">'subpageA'</span>) &#123;</span><br><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName:'subpageA' */</span><span class="string">'./subPageA'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">subPageA</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(subPageA);</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (page === <span class="string">'subpageB'</span>) &#123;</span><br><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName:'subpageB' */</span><span class="string">'./subPageB'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">subPageB</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(subPageB);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'pageA'</span>;</span><br></pre></td></tr></table></figure></p><h3 id="处理CSS"><a href="#处理CSS" class="headerlink" title="处理CSS"></a>处理CSS</h3><ul><li>css-loader </li><li>style-loader // 在页面中插入style标签</li></ul><p><code>npm i style-loader css-loader</code></p><p>webpack.config.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="string">'app'</span>: <span class="string">'./src/app.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: &#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">&#123;</span><br><span class="line">          loader: <span class="string">'style-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line">&#123;</span><br><span class="line">  loader: <span class="string">'css-loader'</span></span><br><span class="line">        &#125;</span><br><span class="line">  ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="配置Less-Sass"><a href="#配置Less-Sass" class="headerlink" title="配置Less/Sass"></a>配置Less/Sass</h4><p><code>npm i less-loader less --save-dev</code></p><p><code>npm i sass-loader node-sass --save-dev</code></p><p>webpack.config.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="string">'app'</span>: <span class="string">'./src/app.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: &#123;</span><br><span class="line">      test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">&#123;</span><br><span class="line">        loader: <span class="string">'style-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line">&#123;</span><br><span class="line">loader: <span class="string">'css-loader'</span></span><br><span class="line">        &#125;,</span><br><span class="line">&#123;</span><br><span class="line">loader: <span class="string">'less-loader'</span></span><br><span class="line">&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="提前CSS"><a href="#提前CSS" class="headerlink" title="提前CSS"></a>提前CSS</h4><p><code>npm i extract-text-webpack-plugin --save-dev</code></p><p>webpack.config.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ExtractTextWebpackPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin);</span></span><br><span class="line"><span class="string">module.exports = &#123;</span></span><br><span class="line"><span class="string">  entry: &#123;</span></span><br><span class="line"><span class="string">    '</span>app<span class="string">': '</span>./src/app.js<span class="string">'</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  output: &#123;</span></span><br><span class="line"><span class="string">    filename: '</span>[name].bundle.js<span class="string">'</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  module: &#123;</span></span><br><span class="line"><span class="string">    rules: &#123;</span></span><br><span class="line"><span class="string">      test: /\.less$/,</span></span><br><span class="line"><span class="string">      use: ExtractTextWebpackPlugin.extract(&#123;</span></span><br><span class="line"><span class="string">        fallback: &#123;</span></span><br><span class="line"><span class="string">          loader: '</span>style-loader<span class="string">'</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">use: [</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    loader: '</span>style-loader<span class="string">'</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    loader: '</span>css-loader<span class="string">',</span></span><br><span class="line"><span class="string">options:&#123;</span></span><br><span class="line"><span class="string">  minimize: true // 压缩</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">    loader: '</span>less-loader<span class="string">'</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  plugins:[</span></span><br><span class="line"><span class="string">  new ExtractTextWebpackPlugin(&#123;</span></span><br><span class="line"><span class="string">  filename: '</span>[name].min.css<span class="string">',</span></span><br><span class="line"><span class="string">  allChunks: false</span></span><br><span class="line"><span class="string">  //  allChunks默认false，只打包初始化的css，异步加载的css不会打包</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="PostCSS-in-WebPack"><a href="#PostCSS-in-WebPack" class="headerlink" title="PostCSS in WebPack"></a>PostCSS in WebPack</h3><ul><li><p>PostCSS</p><blockquote><p>A tool for transforming CSS with JavaScript</p></blockquote></li><li><p>Autoprefixer</p><blockquote><p>加上浏览器前缀    </p></blockquote></li><li><p>CSS-nano</p><blockquote><p>压缩css</p></blockquote></li><li><p>CSS-next</p><blockquote><p>Use tomorrow’s CSS syntax,today</p></blockquote></li></ul><h4 id="安装相关插件"><a href="#安装相关插件" class="headerlink" title="安装相关插件"></a>安装相关插件</h4><p><code>npm i postcss postss-loader autoprefixer cssnano postcss-cssnext --save-dev</code></p><h4 id="webpack-配置"><a href="#webpack-配置" class="headerlink" title="webpack 配置"></a>webpack 配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ExtractTextWebpackPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">entry: &#123;</span><br><span class="line">    <span class="string">'app'</span>: <span class="string">'./src/app.js'</span></span><br><span class="line">&#125;,</span><br><span class="line">output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: &#123;</span><br><span class="line">      test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">      use: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class="line">        fallback: &#123;</span><br><span class="line">          loader: <span class="string">'style-loader'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        use: [&#123;</span><br><span class="line">          loader: <span class="string">'style-loader'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'css-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            minimize: <span class="literal">true</span> <span class="comment">// 压缩</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">          ident: <span class="string">'postcss'</span>,</span><br><span class="line">            plugins: [</span><br><span class="line">              <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(),</span><br><span class="line">              <span class="built_in">require</span>(<span class="string">'postcss-cssnext'</span>)()</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'less-loader'</span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> ExtractTextWebpackPlugin(&#123;</span><br><span class="line">        filename: <span class="string">'[name].min.css'</span>,</span><br><span class="line">        allChunks: <span class="literal">false</span></span><br><span class="line">        <span class="comment">//  allChunks默认false，只打包初始化的css，异步加载的css不会打包</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h3><h4 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h4><p>场景：</p><ul><li>CSS中引入的图片 —— <code>file-loader</code></li><li>自动合成雪碧图 —— <code>postcss-sprites</code></li><li>压缩图片 —— <code>img-loader</code></li><li>Base64编码 —— <code>url-loader</code></li></ul><p><code>npm i file-loader url-loader img-loader postcss-sprites --save-dev</code></p><h5 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'file-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">            publicPath: <span class="string">''</span>,</span><br><span class="line">            outputPath: <span class="string">'dist/'</span>, <span class="comment">// 设置输出文件地址</span></span><br><span class="line">            useRelativePath: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [&#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">    use: [&#123;</span><br><span class="line">      loader: <span class="string">'url-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        publicPath: <span class="string">''</span>,</span><br><span class="line">        outputPath: <span class="string">'dist/'</span>, <span class="comment">// 设置输出文件地址</span></span><br><span class="line">        useRelativePath: <span class="literal">true</span>,</span><br><span class="line">        limit: <span class="number">10000</span> <span class="comment">// 10k</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>urL-loader</code> 有<code>file-loader</code>的功能，可以只用<code>url-loader</code></p></blockquote><h5 id="img-loader"><a href="#img-loader" class="headerlink" title="img-loader"></a>img-loader</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [&#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">    use: [&#123;</span><br><span class="line">      loader: <span class="string">'url-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        name: <span class="string">'[name]-[hash:5].min.[ext]'</span>, <span class="comment">// 5位hash值</span></span><br><span class="line">        publicPath: <span class="string">''</span>,</span><br><span class="line">        outputPath: <span class="string">'dist/'</span>, <span class="comment">// 设置输出文件地址</span></span><br><span class="line">        useRelativePath: <span class="literal">true</span>,</span><br><span class="line">        limit: <span class="number">10000</span> <span class="comment">// 10k</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'img-loader'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="postcss-sprites"><a href="#postcss-sprites" class="headerlink" title="postcss-sprites"></a>postcss-sprites</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [&#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">    use: [&#123;</span><br><span class="line">      loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        ident: <span class="string">'postcss'</span>,</span><br><span class="line">        plugins: [</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">'postcss-sprites'</span>)(&#123;</span><br><span class="line">            spritePath: <span class="string">'dist/assets/imgs/sprites'</span>,</span><br><span class="line">            retina: <span class="literal">true</span> <span class="comment">// 1@2x.png</span></span><br><span class="line">          &#125;),</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">'postcss-cssnext'</span>)()</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字体文件处理"><a href="#字体文件处理" class="headerlink" title="字体文件处理"></a>字体文件处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [&#123;</span><br><span class="line">    test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf|svg)$/</span>,</span><br><span class="line">    use: [&#123;</span><br><span class="line">      loader: <span class="string">'url-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        limit: <span class="number">8192</span>,</span><br><span class="line">        name: <span class="string">'resource/[name].[ext]'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      webpack学习笔记
    
    </summary>
    
      <category term="webpack" scheme="http://yoursite.com/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>一张图、一句话、一段代码</title>
    <link href="http://yoursite.com/2018/02/06/one-one-one/"/>
    <id>http://yoursite.com/2018/02/06/one-one-one/</id>
    <published>2018-02-06T05:27:50.000Z</published>
    <updated>2018-04-23T01:47:31.483Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有时候别人一句话就把你点通了——写给自己</p></blockquote><h2 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h2><ul><li>javascript中没有独立的函数和属性，每一个函数和属性都是属于一个对象。（this的理解）</li><li>New的过程<ol><li>声明一个中间对象</li><li>将中间对象的原型指向构造函数的原型</li><li>将构造函数的this指向中间对象</li><li>返回中间对象，即实例对象</li></ol></li><li>从逻辑角度来看， null值表示一个空对象指针，而这也正是使用<code>typeof</code>操作符检测null值时会返回”object”的原因。</li><li><code>parseInt()</code>函数在转换字符串时，更多的是看其是否符合数值模式。它会忽略字符串前面的空格，直至找到第一个非空格字符。如果第一个字符不是数字字符或者负号，<code>parseInt()</code>就会返回 NaN；也就是说，用<code>parseInt()</code>转换空字符串会返回NaN(<code>Number()</code>对空字符串返回0);</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Number()</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">Number</span>(<span class="string">"Hello world!"</span>); <span class="comment">//NaN </span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">Number</span>(<span class="string">""</span>); <span class="comment">//0 </span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="built_in">Number</span>(<span class="string">"000011"</span>); <span class="comment">//11 </span></span><br><span class="line"><span class="keyword">var</span> num4 = <span class="built_in">Number</span>(<span class="literal">true</span>); <span class="comment">//1 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// parseInt()</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">"1234blue"</span>); <span class="comment">// 1234 </span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(<span class="string">""</span>); <span class="comment">// NaN </span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="built_in">parseInt</span>(<span class="string">"0xA"</span>); <span class="comment">// 10（十六进制数）</span></span><br><span class="line"><span class="keyword">var</span> num4 = <span class="built_in">parseInt</span>(<span class="number">22.5</span>); <span class="comment">// 22 </span></span><br><span class="line"><span class="keyword">var</span> num5 = <span class="built_in">parseInt</span>(<span class="string">"070"</span>); <span class="comment">// 56（八进制数）70 (十进制数)</span></span><br><span class="line"><span class="keyword">var</span> num6 = <span class="built_in">parseInt</span>(<span class="string">"70"</span>); <span class="comment">// 70（十进制数）</span></span><br><span class="line"><span class="keyword">var</span> num7 = <span class="built_in">parseInt</span>(<span class="string">"0xf"</span>); <span class="comment">// 15（十六进制数）</span></span><br></pre></td></tr></table></figure><blockquote><p>在使用 parseInt()解析像八进制字面量的字符串时，ECMAScript 3 和 5 存在分歧。例如：<br>//ECMAScript 3 认为是 56（八进制），ECMAScript 5 认为是 70（十进制）<br>var num = parseInt(“070”); </p></blockquote><ul><li>在任意一个时间点，只能有唯一一个执行上下文在运行之中。这就是为什么 JavaScript 是“单线程”的原因，意思就是一次只能处理一个请求。一般来说，浏览器会用“栈”来保存这个执行上下文。栈是一种“后进先出” (Last In First Out) 的数据结构，即最后插入该栈的元素会最先从栈中被弹出（这是因为我们只能从栈的顶部插入或删除元素）。当前的执行上下文，或者说正在运行中的执行上下文永远在栈顶。当运行中的上下文被完全执行以后，它会由栈顶弹出，使得下一个栈顶的项接替它成为正在运行的执行上下文。</li></ul><hr><h2 id="一段代码"><a href="#一段代码" class="headerlink" title="一段代码"></a>一段代码</h2><ul><li>判断对象的类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(obj).slice(<span class="number">8</span>,<span class="number">-1</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/TqrGqCB.png" alt=""></p><ul><li>插件的套路</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global, factory</span>) </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模块环境探测</span></span><br><span class="line"><span class="comment"> * AMD 定义了 define 函数，我们可以使用 typeof 探测该函数是否已定义。若要更严格一点，可以继续判断 define.amd 是否有定义。</span></span><br><span class="line"><span class="comment"> * 另外，SeaJS 也使用了 define 函数，但和 AMD 的 define 又不太一样。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typeof</span> exports === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span> ? <span class="built_in">module</span>.exports = factory() :</span><br><span class="line"><span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd ? define(factory) :</span><br><span class="line">(global.lozad = factory());</span><br><span class="line">&#125;(<span class="keyword">this</span>, (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="string">'use strict'</span>;</span><br><span class="line"><span class="comment">// 为什么传入this，而不传入window，因为在不同的环境下，全局变量不同，在nodejs就没有window对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取元素(插件里面的，根据用户传的element)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getElements = <span class="function"><span class="keyword">function</span> <span class="title">getElements</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (selector <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">    <span class="keyword">return</span> [selector];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (selector <span class="keyword">instanceof</span> NodeList) &#123;</span><br><span class="line">    <span class="keyword">return</span> selector;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.querySelectorAll(selector); <span class="comment">// querySelectorAll</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>call</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cat = &#123;</span><br><span class="line">  name: <span class="string">'咪咪'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">beatTheMonster</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">beatTheMonster.call(cat);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.call 改变了this的指向。改变到了cat上。</span></span><br><span class="line"><span class="comment">// 2.beatTheMonster函数/方法执行了</span></span><br><span class="line"><span class="comment">// 3.bind()，保存了方法，并没有直接调用它</span></span><br></pre></td></tr></table></figure><ul><li>Vue axios默认地址</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="comment">//全局挂载</span></span><br><span class="line">Vue.prototype.$axios = axios;</span><br><span class="line">axios.defaults.baseURL = <span class="string">'http://XXXXX'</span>;</span><br></pre></td></tr></table></figure><ul><li>数组concat</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> arrTarget = [...arr1,...arr2];</span><br><span class="line"><span class="comment">// [1,2,3,4,5,6,7,8,9,0]</span></span><br></pre></td></tr></table></figure><ul><li>为对象动态地添加字段</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dynamicKey = <span class="string">"wearsSpectacles"</span>;</span><br><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">name</span>: <span class="string">'Shivek Khurana'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> updatedUser = &#123;...user,[dynamicKey]: <span class="literal">true</span>&#125;;</span><br><span class="line"><span class="comment">// updateUser is &#123;name: 'Shivek Khurana',wearsSpectacles: true&#125;</span></span><br></pre></td></tr></table></figure><ul><li>标准时间转换为时间戳</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> d1 = +<span class="keyword">new</span> <span class="built_in">Date</span>(date);</span><br></pre></td></tr></table></figure><hr><h2 id="一张图"><a href="#一张图" class="headerlink" title="一张图"></a>一张图</h2><ul><li>面向对象</li></ul><p><img src="https://i.imgur.com/bCdhs7L.png" alt=""></p><ul><li>webpack</li></ul><p><img src="https://i.imgur.com/NbPRvzp.png" alt=""></p><ul><li>浏览器主要进程</li></ul><p><img src="https://i.imgur.com/cXloUjf.png" alt=""></p><ul><li>宏任务(macrotask)与微任务(microtask)</li></ul><p><img src="https://i.imgur.com/otax4mX.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      一张图、一句话、一段代码给我带来的提示
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杂记" scheme="http://yoursite.com/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>原生javascript实现extend</title>
    <link href="http://yoursite.com/2018/02/06/extend/"/>
    <id>http://yoursite.com/2018/02/06/extend/</id>
    <published>2018-02-06T02:59:44.000Z</published>
    <updated>2018-04-23T01:47:31.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="string">'a'</span>: <span class="string">'obj2'</span>,<span class="string">'b'</span>:<span class="string">'2'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>: <span class="string">'obj3'</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> length = <span class="built_in">arguments</span>.length;</span><br><span class="line"><span class="keyword">var</span> target = <span class="built_in">arguments</span>[<span class="number">0</span>] || &#123;&#125;;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> target!=<span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> target != <span class="string">"function"</span>) &#123;</span><br><span class="line">target = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">target = <span class="keyword">this</span>;</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; length; i++) &#123; </span><br><span class="line"><span class="keyword">var</span> source = <span class="built_in">arguments</span>[i]; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> source) &#123; </span><br><span class="line"><span class="comment">// 使用for in会遍历数组所有的可枚举属性，包括原型。</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(source, key)) &#123; </span><br><span class="line">target[key] = source[key]; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> target; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(extend(obj1,obj2));</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/joi66PN.png" alt=""></p><blockquote><p>extend 要实现的是给任意对象扩展</p></blockquote><h2 id="分析一下"><a href="#分析一下" class="headerlink" title="分析一下"></a>分析一下</h2><p>在extend()函数中没有写死参数，是为了更好的扩展性，永远也不知道需要扩展的对象有几个。<br>而是通过arguments来获取传进来的参数。</p><blockquote><p>arguments对象不是一个 Array 。它类似于Array，但除了length属性和索引元素之外没有任何Array属性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以转换为数组 ES2015</span></span><br><span class="line"><span class="keyword">const</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">arguments</span>); <span class="comment">// 'object'</span></span><br></pre></td></tr></table></figure><h3 id="target"><a href="#target" class="headerlink" title="target"></a>target</h3><p>target是传进来的第一个参数，也就是需要扩展的对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = <span class="built_in">arguments</span>[<span class="number">0</span>] || &#123;&#125;; <span class="comment">// 如果没有传参，则设为一个空对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行这一步判断是为了保证代码的可执行性，如果传进来的是个数字、布尔值，则设为一个空对象</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> target!=<span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> target != <span class="string">"function"</span>) &#123;</span><br><span class="line">target = &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="循环遍历赋值"><a href="#循环遍历赋值" class="headerlink" title="循环遍历赋值"></a>循环遍历赋值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; length; i++) &#123; </span><br><span class="line"><span class="keyword">var</span> source = <span class="built_in">arguments</span>[i]; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> source) &#123; </span><br><span class="line"><span class="comment">// 使用for in会遍历数组所有的可枚举属性，包括原型。</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(source, key)) &#123; </span><br><span class="line">target[key] = source[key]; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一步就是将扩展源里的属性、方法循环遍历赋值到扩展项中。</p><blockquote><p>如果扩展项和扩展源中有相同的属性、方法，后面的会覆盖前面的。 这个思想也是插件开发中，实现用户配置覆盖默认设置的实现思想。</p></blockquote><h3 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h3><p>为什么需要使用hasOwnProperty，这跟<code>for in</code>有密切关系。</p><blockquote><p>使用for in会遍历所有的可枚举属性，包括原型。</p></blockquote><p>所以需要判断一下，是否是对象自身的属性，而不是继承于原型的。</p><h3 id="那为什么不直接使用source-hasOwnProperty-source-key-呢？"><a href="#那为什么不直接使用source-hasOwnProperty-source-key-呢？" class="headerlink" title="那为什么不直接使用source.hasOwnProperty(source[key])呢？"></a>那为什么不直接使用<code>source.hasOwnProperty(source[key])</code>呢？</h3><p>JavaScript 并没有保护 hasOwnProperty 属性名，因此某个对象是有可能存在使用这个属性名的属性，使用外部的 hasOwnProperty 获得正确的结果是需要的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    hasOwnProperty: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    bar: <span class="string">'Here be dragons'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo.hasOwnProperty(<span class="string">'bar'</span>); <span class="comment">// 始终返回 false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果担心这种情况，可以直接使用原型链上真正的 hasOwnProperty 方法</span></span><br><span class="line">(&#123;&#125;).hasOwnProperty.call(foo, <span class="string">'bar'</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以使用 Object 原型上的 hasOwnProperty 属性</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.hasOwnProperty.call(foo, <span class="string">'bar'</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h3 id="call-apply"><a href="#call-apply" class="headerlink" title="call apply"></a>call apply</h3><p>上面用到的call和apply，就在这里记录一下。</p><blockquote><p>1.每个函数都包含两个非继承而来的方法：call()方法和apply()方法。<br>2.相同点：这两个方法的作用是一样的。<br>都是在特定的作用域中调用函数，等于设置函数体内this对象的值，以扩充函数赖以运行的作用域。<br>一般来说，this总是指向调用某个方法的对象，但是使用call()和apply()方法时，就会改变this的指向。<br>3.不同点：接收参数的方式不同。</p><ul><li>apply()方法 接收两个参数，一个是函数运行的作用域（this），另一个是参数数组。<br>语法：apply([thisObj [,argArray] ]);，调用一个对象的一个方法，2另一个对象替换当前对象。<br>说明：如果argArray不是一个有效数组或不是arguments对象，那么将导致一个TypeError，如果没有提供argArray和thisObj任何一个参数，那么Global对象将用作thisObj。</li><li>call()方法 第一个参数和apply()方法的一样，但是传递给函数的参数必须列举出来。<br>语法：call([thisObject[,arg1 [,arg2 [,…,argn]]]]);，应用某一对象的一个方法，用另一个对象替换当前对象。<br>说明： call方法可以用来代替另一个对象调用一个方法，call方法可以将一个函数的对象上下文从初始的上下文改变为thisObj指定的新对象，如果没有提供thisObj参数，那么Global对象被用于thisObj。</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// call</span></span><br><span class="line">    <span class="built_in">window</span>.name = <span class="string">'FinGet'</span>;</span><br><span class="line">    <span class="built_in">document</span>.name = <span class="string">'FinGet1'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> boy = &#123;<span class="attr">name</span>: <span class="string">'FinGet2'</span> &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    showName.call();         <span class="comment">//FinGet (默认传递参数)  this 是指向window</span></span><br><span class="line">    showName.call(<span class="built_in">window</span>);   <span class="comment">//FinGet</span></span><br><span class="line">    showName.call(<span class="built_in">document</span>); <span class="comment">//FinGet1</span></span><br><span class="line">    showName.call(<span class="keyword">this</span>);     <span class="comment">//FinGet</span></span><br><span class="line">    showName.call(boy);       <span class="comment">//FinGet2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Pet = &#123;</span><br><span class="line">        words : <span class="string">'hello'</span>,</span><br><span class="line">        speak : <span class="function"><span class="keyword">function</span> (<span class="params">say</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(say + <span class="string">''</span>+ <span class="keyword">this</span>.words)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Pet.speak(<span class="string">'Speak'</span>); <span class="comment">// 结果：Speakhello</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Dog = &#123;</span><br><span class="line">        words:<span class="string">'Wang'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将this的指向改变成了Dog</span></span><br><span class="line">    Pet.speak.call(Dog, <span class="string">'Speak'</span>); <span class="comment">//结果： SpeakWang</span></span><br></pre></td></tr></table></figure><p>可以将上面代码中的call换成apply，也是可以执行的。</p><h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h2><blockquote><p>Object.assign(target, …sources)</p><ul><li>target 目标对象</li><li>sources 源对象</li></ul></blockquote><blockquote><p>如果目标对象中的属性具有相同的键，则属性将被源中的属性覆盖。后来的源的属性将类似地覆盖早先的属性。<br>注意，Object.assign 会跳过那些值为 null 或 undefined 的源对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">a</span>:<span class="string">'1'</span>,<span class="attr">b</span>:<span class="string">'2'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">c</span>:<span class="string">'3'</span>,<span class="attr">d</span>:<span class="string">'4'</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(obj1,obj2); <span class="comment">// Object &#123;a: "1", b: "2", c: "3", d: "4"&#125;</span></span><br><span class="line"></span><br><span class="line">obj1 也改变</span><br><span class="line"><span class="built_in">Object</span> &#123;<span class="attr">a</span>: <span class="string">"1"</span>, <span class="attr">b</span>: <span class="string">"2"</span>, <span class="attr">c</span>: <span class="string">"3"</span>, <span class="attr">d</span>: <span class="string">"4"</span>&#125;</span><br><span class="line"></span><br><span class="line">obj2</span><br><span class="line"><span class="built_in">Object</span> &#123;<span class="attr">c</span>: <span class="string">"3"</span>, <span class="attr">d</span>: <span class="string">"4"</span>&#125;</span><br></pre></td></tr></table></figure><p>更多相关Object.assign可以<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener">查看官网。</a></p>]]></content>
    
    <summary type="html">
    
      原生javascript实现extend;es6之Object.assign;call 和 apply
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>原生——ajax</title>
    <link href="http://yoursite.com/2018/01/26/ajax/"/>
    <id>http://yoursite.com/2018/01/26/ajax/</id>
    <published>2018-01-26T01:33:17.000Z</published>
    <updated>2018-04-23T01:47:31.481Z</updated>
    
    <content type="html"><![CDATA[<p>什么是Ajax？（前后端数据交互）<br>Asynchronous JavaScript and XML（异步JavaScript和XML）</p><p>a.节省用户操作时间，提高用户体验，减少数据请求<br>b.传输、获取数据<br>ajax流程：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">oBtn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//第一步    ‘打开浏览器’    创建ajax对象</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    var xmlhttp;</span></span><br><span class="line"><span class="comment">    第一种方式</span></span><br><span class="line"><span class="comment">    if (window.XMLHttpRequest)&#123;// code for IE7+, Firefox, Chrome, Opera, Safari//ie6下不存在XMLHttpRequest，所以不能用XMLHttpRequest作判断条件  应该判断window下有没有XMLHttpRequest属性，如果没有只会返回undefined，不会报错</span></span><br><span class="line"><span class="comment">         xmlhttp=new XMLHttpRequest();</span></span><br><span class="line"><span class="comment">    &#125;else&#123;// code for IE6, IE5</span></span><br><span class="line"><span class="comment">             xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");</span></span><br><span class="line"><span class="comment">         &#125;</span></span><br><span class="line"><span class="comment">    第二种方式</span></span><br><span class="line"><span class="comment">    try&#123;</span></span><br><span class="line"><span class="comment">        xmlhttp=new XMLHttpRequest();</span></span><br><span class="line"><span class="comment">    &#125;catch(e)&#123;</span></span><br><span class="line"><span class="comment">        xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">   <span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//第二步    ‘在地址栏输入地址’</span></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   open()</span></span><br><span class="line"><span class="comment">   参数</span></span><br><span class="line"><span class="comment">     1.打开方式</span></span><br><span class="line"><span class="comment">     2.地址</span></span><br><span class="line"><span class="comment">     3.是否异步</span></span><br><span class="line"><span class="comment">         异步：非阻塞</span></span><br><span class="line"><span class="comment">         同步：阻塞</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">   xhr.open(<span class="string">'get'</span>,<span class="string">'1.txt'</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//第三步    ‘提交’    发送请求</span></span><br><span class="line">  xhr.send();</span><br><span class="line"><span class="comment">//第四步    ‘等待服务器返回结果’</span></span><br><span class="line"><span class="comment">/** 请求状态监控</span></span><br><span class="line"><span class="comment">  on readystate change事件</span></span><br><span class="line"><span class="comment">  readyState属性：请求状态</span></span><br><span class="line"><span class="comment">     0    （初始化）还没有调用open()方法</span></span><br><span class="line"><span class="comment">     1    （载入）已调用send()方法，正在发送请求</span></span><br><span class="line"><span class="comment">     2    （载入完成）send()方法完成，已收到全部响应内容</span></span><br><span class="line"><span class="comment">     3    （解析）正在解析响应内容</span></span><br><span class="line"><span class="comment">     4    （完成）响应内容解析完成，可以在客户端调用了</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    status属性：服务器(请求资源)的状态      http状态码</span></span><br><span class="line"><span class="comment">    返回的内容</span></span><br><span class="line"><span class="comment">        responseText：返回以文本形式存放的内容</span></span><br><span class="line"><span class="comment">        responseXML：返回XML形式的内容</span></span><br><span class="line"><span class="comment">    * readyState:ajax工作状态</span></span><br><span class="line"><span class="comment">    responseText:ajax请求返回的内容就被存放到这个属性下面</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (xhr.readyState==<span class="number">4</span>) &#123;</span><br><span class="line"></span><br><span class="line">             <span class="comment">//容错处理</span></span><br><span class="line">             <span class="keyword">if</span>(xhr.status==<span class="number">200</span>)&#123;</span><br><span class="line">                   alert(xhr.responseText);</span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   alert(<span class="string">'出错了，Err:'</span>+xhr.status);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>form表单:<br>action：数据提交地址，默认是当前页面<br>method：数据提交方式，默认是get方式</p><p>1.get<br>把数据名称和数据值用=连接，如果有多个的话，那么他会把多个数据组合用&amp;进 行连接，然后把数据放到url?后面传到指定页面 url长度限制的原因，我们不要通过get方式传递过多的数据<br>2.post 理论上无限制<br>enctype：提交的数据格式 ，默认是：application/x-www-form-unlencoded<br>application/x-www-form-urlencoded<br>清除ajax缓存:<br>一、GET 方式请求</p><p>如果两次请求的url相同的话 浏览器（不同缓存机制的浏览器会有所不同）会直接将第一次请求的结果给第二次请求</p><p>防止这种缓存的方法：</p><p>请求的url地址？t=new Date()</p><p>二、 POST 方式请求</p><p>浏览器认为Post的提交必然是有改变的 所以一般post请求 不会从缓存中去数据</p><p>三、 jQuery中的有设置缓存的开关</p><p>不管是哪中方式请求 我们可以设置缓存开关：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ajax.Setup(｛ cache:<span class="literal">false</span>｝);</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(‘get’, ‘<span class="number">2.</span>get.PHP?username=’ + <span class="built_in">encodeURI</span>(‘刘伟’) + ‘&amp;age=<span class="number">30</span>&amp;’ + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(), <span class="literal">true</span>); </span><br><span class="line"> <span class="comment">// encodeURL()处理中文乱码问题</span></span><br></pre></td></tr></table></figure><p>get方式提交数据<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>无标题文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;script src="jquery.js"&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//$(function()&#123;&#125;)    //阻塞 -&gt; 同步</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//非阻塞 - 异步</span></span></span><br><span class="line"><span class="undefined">/*setTimeout(function() &#123;</span></span><br><span class="line"><span class="undefined">    alert(1);</span></span><br><span class="line"><span class="undefined">&#125;, 2000);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">alert(2);*/</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> xhr = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">            xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">            xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        /*</span></span><br><span class="line"><span class="undefined">            1.缓存 在url？后面连接一个随机数，时间戳</span></span><br><span class="line"><span class="javascript">            <span class="number">2.</span>乱码 编码<span class="built_in">encodeURI</span></span></span><br><span class="line"><span class="undefined">        */</span></span><br><span class="line"><span class="javascript">        xhr.open(<span class="string">'get'</span>,<span class="string">'2.get.php?username='</span>+<span class="built_in">encodeURI</span>(<span class="string">'刘伟'</span>)+<span class="string">'&amp;age=30&amp;'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),<span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined">        xhr.send();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> ( xhr.readyState == <span class="number">4</span> ) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> ( xhr.status == <span class="number">200</span> ) &#123;</span></span><br><span class="line"><span class="undefined">                    alert( xhr.responseText );</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">'出错了,Err：'</span> + xhr.status);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">id</span>=<span class="string">"btn"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>post方式提交数据<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>无标题文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;script src="jquery.js"&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//$(function()&#123;&#125;)    //阻塞 -&gt; 同步</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//非阻塞 - 异步</span></span></span><br><span class="line"><span class="undefined">/*setTimeout(function() &#123;</span></span><br><span class="line"><span class="undefined">    alert(1);</span></span><br><span class="line"><span class="undefined">&#125;, 2000);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">alert(2);*/</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> xhr = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">            xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">            xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        xhr.open(<span class="string">'post'</span>,<span class="string">'2.post.php'</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//post方式，数据放在send()里面作为参数传递</span></span></span><br><span class="line"><span class="javascript">        xhr.setRequestHeader(<span class="string">'content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);<span class="comment">//申明发送的数据类型</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//post没有缓存问题</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//无需编码</span></span></span><br><span class="line"><span class="javascript">        xhr.send(<span class="string">'username=刘伟&amp;age=30'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> ( xhr.readyState == <span class="number">4</span> ) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> ( xhr.status == <span class="number">200</span> ) &#123;</span></span><br><span class="line"><span class="undefined">                    alert( xhr.responseText );</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">'出错了,Err：'</span> + xhr.status);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">id</span>=<span class="string">"btn"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>封装ajax.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">method, url, data, success</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">                xhr = <span class="keyword">new</span> XMLHttpRequest();<span class="comment">//new一个xhr对象，这个对象像信使一样存在着</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);<span class="comment">//为了兼容IE6</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果是get请求，而且data存在，则是要通过get请求发送数据，通过get请求发送数据，数据会被链接到请求地址之后</span></span><br><span class="line">        <span class="keyword">if</span> (method == <span class="string">'get'</span> &amp;&amp; data) &#123;</span><br><span class="line">                url += <span class="string">'?'</span> + data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//初始化请求，method表示请求方式，url是请求地址，true表示异步</span></span><br><span class="line">        xhr.open(method,url,<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (method == <span class="string">'get'</span>) &#123;</span><br><span class="line">                xhr.send();<span class="comment">//发送请求</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                xhr.setRequestHeader(<span class="string">'content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);<span class="comment">//post方式，需要设置请求头</span></span><br><span class="line">                xhr.send(data);<span class="comment">//发送提交数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> ( xhr.readyState == <span class="number">4</span> ) &#123;<span class="comment">//4是请求最后的阶段，</span></span><br><span class="line">                        <span class="comment">//http状态码，2开头便是还请求成功</span></span><br><span class="line">                        <span class="keyword">if</span> ( xhr.status == <span class="number">200</span> ) &#123;</span><br><span class="line">                                success &amp;&amp; success(xhr.responseText);<span class="comment">//在这里判断一下，如果success存在，则执行它，将响应数据作为参数传入回调函数</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                alert(<span class="string">'出错了,Err：'</span> + xhr.status);</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>jquery $ajax<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">"get"</span>, <span class="comment">//jquey是不支持post方式跨域的</span></span><br><span class="line">        <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">        url: <span class="string">"http://thinke.cn/yqschool/slide"</span>, <span class="comment">//跨域请求的URL</span></span><br><span class="line">        dataType: <span class="string">"jsonp"</span>,</span><br><span class="line">        <span class="comment">//传递给请求处理程序，用以获得jsonp回调函数名的参数名(默认为:callback)</span></span><br><span class="line">        jsonp: <span class="string">"jsoncallback"</span>,</span><br><span class="line">        <span class="comment">//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名</span></span><br><span class="line">        jsonpCallback: <span class="string">"success_jsonpCallback"</span>,</span><br><span class="line">        <span class="comment">//成功获取跨域服务器上的json数据后,会动态执行这个callback函数</span></span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//console.log(json[0].title);</span></span><br><span class="line">            <span class="comment">//console.log(json.length);</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data[i].title);</span><br><span class="line">                <span class="built_in">console</span>.log(data[i].date);</span><br><span class="line">                <span class="built_in">console</span>.log(data[i].link);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      什么是Ajax? 详解原生js封装ajax
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>一张图展示一段js代码的一生，变量对象、作用域链、闭包、this</title>
    <link href="http://yoursite.com/2018/01/26/JavaScript%E7%9A%84%E4%B8%80%E7%94%9F/"/>
    <id>http://yoursite.com/2018/01/26/JavaScript的一生/</id>
    <published>2018-01-26T01:26:18.000Z</published>
    <updated>2018-04-23T01:47:31.481Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/9LkJ8hC.png" alt=""></p><p>我也只是进行了一个简单的囊括，图中来源均属<a href="https://yangbo5207.github.io/wutongluo/ji-chu-jin-jie-xi-lie/er-3001-zhi-xing-shang-xia-wen.html" target="_blank" rel="noopener">该文</a>，强烈推荐小伙伴去详细看一下‘<a href="https://yangbo5207.github.io/wutongluo/ji-chu-jin-jie-xi-lie/er-3001-zhi-xing-shang-xia-wen.html" target="_blank" rel="noopener">这波能反杀</a>’的文章，定有收获。</p>]]></content>
    
    <summary type="html">
    
      一张图展示一段js代码的一生，变量对象、作用域链、闭包、this
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>移动端1px边框解决方案</title>
    <link href="http://yoursite.com/2018/01/26/border1px/"/>
    <id>http://yoursite.com/2018/01/26/border1px/</id>
    <published>2018-01-26T01:04:39.000Z</published>
    <updated>2018-04-23T01:47:31.482Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border-1px</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.border-1px</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(0.5);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(0.5);</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> (-webkit-min-device-pixel-radio: <span class="number">1.5</span>), (min-device-pixel-radio: <span class="number">1.5</span>) &#123;</span><br><span class="line">  <span class="selector-tag">border-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">scaleY</span>(0.7);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(0.7);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> (-webkit-min-device-pixel-radio: <span class="number">2</span>), (min-device-pixel-radio: <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="selector-tag">border-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">scaleY</span>(0.5);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(0.5);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      移动端1px边框解决方案
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="移动端" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
</feed>
